---
# https://docs.aws.amazon.com/apigateway/latest/developerguide/import-api-aws-variables.html -> We can reference AWS Psuedo Parameters directly in Swagger file
swagger: "2.0"

info:
  description: "AI - API Definition documentation"
  version: "productversion_placeholder"
  title: "apigateway_title_placeholder"

tags:
- name: "Workspaces"
  description: "APIs related to workspace."
- name: "Users"
  description: "users apis"
- name: "Groups"
  description: "groups api"
- name: "Amorphic"
  description: "amorphic related apis"
- name: "Chat"
  description: "Chat related APIs"
- name: "Options"
  description: "APIs used for internal UI"
- name: "Chatbots"
  description: "APIs related to Chatbots."
- name: "Custom Models"
  description: "Custom Model related apis"
schemes:
- "https"

securityDefinitions:
  LambdaAuthorizer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "oauth2"
    x-amazon-apigateway-authorizer:
      type: "request"
      identitySource: "method.request.header.Authorization"
      authorizerUri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-environment_placeholder-v2-authorizerLambda:environment_placeholder/invocations"
      authorizerCredentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lambdaexecrole_placeholder"
      authorizerResultTtlInSeconds: 30

paths:
  ### Workspaces APIs
  /workspaces:
    get:
      tags:
      - "Workspaces"
      summary: "List details of all workspaces"
      description: "List details of all workspace user have access to"
      parameters:
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "sortorder"
        in: "query"
        required: false
        type: "string"
      - name: "sortby"
        in: "query"
        required: false
        type: "string"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/WorkspacesList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
      - "Workspaces"
      summary: "Create a new workspaces"
      description: "Create a new workspace"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "NeworkspaceBody"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/NewWorkspaceBody"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/CreateWorkspaceResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /workspaces/{id}:
    get:
      tags:
      - "Workspaces"
      summary: "Get workspace details"
      description: "Get details of a single workspace"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/WorkspaceDetails"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    put:
      tags:
      - "Workspaces"
      summary: "Update a workspace"
      description: "Update a workspace"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "UpdateWorkspaceBody"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateWorkspaceBody"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    delete:
      tags:
      - "Workspaces"
      summary: "Delete a workspace"
      description: "Delete a workspace"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /workspaces/{id}/runs:
    get:
      tags:
      - "Workspaces"
      summary: "List workspace runs details"
      description: "List workspace runs details"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "sortorder"
        in: "query"
        required: false
        type: "string"
      - name: "sortby"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/WorkspaceRunsList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
      - "Workspaces"
      summary: "Run a workspace"
      description: "Run a workspace"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/WorkspaceRunResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /workspaces/{id}/runs/{runid}:
    get:
      tags:
      - "Workspaces"
      summary: "Get workspace run details"
      description: "Get workspace run details"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "runid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/WorkspaceRunDetails"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "runid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /workspaces/{id}/stats:
    get:
      tags:
      - "Workspaces"
      summary: "Get run stats for a workspace"
      description: "Get document runs info stats for a workspace"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/WorkspaceRunsStats"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  ### APIs for web crawling
  /workspaces/{id}/crawl-website:
    get:
      tags:
      - "Workspaces"
      summary: "List workspace web crawling jobs"
      description: "List workspace web crawling jobs"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "sortorder"
        in: "query"
        required: false
        type: "string"
      - name: "sortby"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/WorkspaceWebCrawlingList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "ValidateAll"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
      - "Workspaces"
      summary: "Crawl a website"
      description: "Crawl a website and get a list of nested urls"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "WebCrawlingBody"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/WebCrawlingBody"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/WebCrawlingResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "ValidateAll"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /workspaces/{id}/crawl-website/{crawlid}:
    get:
      tags:
      - "Workspaces"
      summary: "Get list of nested urls for specified website"
      description: "Get list of nested urls for specified website"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "crawlid"
        in: "path"
        required: true
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/ListNestedURLs"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "ValidateAll"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    delete:
      tags:
      - "Workspaces"
      summary: "Delete a workspace"
      description: "Delete a workspace"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "crawlid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "ValidateAll"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "crawlid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /workspaces/{id}/documents:
    get:
      tags:
      - "Workspaces"
      summary: "List workspace documents"
      description: "List details of all workspace documents"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "sortorder"
        in: "query"
        required: false
        type: "string"
      - name: "sortby"
        in: "query"
        required: false
        type: "string"
      - name: "documentType"
        in: "query"
        required: false
        type: "string"
        enum:
          - files
          - qna
          - text
          - website
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/WorkspaceDocumentsList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
        - "Workspaces"
      summary: "Add documents to a workspace"
      description: "Add documents to a workspace"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "action"
        in: "query"
        required: false
        type: "string"
      - name: "AddDocument"
        in: "body"
        required: true
        schema:
          type: "object"
          properties:
            DocumentType:
              type: "string"
            DocumentDetails:
              type: "object"
              properties:
                Filename:
                  type: "string"
                DatasetId:
                  type: "string"
                WebsiteURL:
                  type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            type: "object"
            properties:
              PresignedURL:
                type: "string"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /workspaces/{id}/documents/{documentid}:
    get:
      tags:
      - "Workspaces"
      summary: "Get workspace document details"
      description: "Get workspace document details"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "documentid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/WorkspaceDocumentDetails"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "ValidateAll"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    delete:
      tags:
      - "Workspaces"
      summary: "Delete a workspace file"
      description: "Delete a workspace file"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "documentid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "ValidateAll"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "documentid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"

  ### Management APIs
  /app-management:
    get:
      tags:
      - "Management"
      summary: "Displays System Information/Configuration"
      description: "Displays system information/configuration based on config parameter name."
      produces:
      - "application/json"
      parameters:
      - name: "config"
        in: "query"
        description: "Filter configurations by name"
        type: "string"
        required: false
        enum:
          - all
          - batch-processing
      - name: "projectionExpression"
        in: "query"
        type: "string"
        required: false
      responses:
        200:
          description: "Returns System Information/Configuration based on the request"
          schema:
            $ref: "#/definitions/SystemConfiguration"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Missing required request parameters"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "ValidateAll"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-appManagement/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    put:
      tags:
      - "Management"
      summary: "Updates System Configuration"
      description: "Update system configuration based on query parameter"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Type"
        in: "header"
        type: "string"
      - name: "config"
        in: "query"
        type: "string"
        required: true
      - in: "body"
        name: "UpdateSystemConfiguration"
        required: true
        schema:
          $ref: "#/definitions/UpdateSystemConfiguration"
      responses:
        200:
          description: "System configuration updated successfully"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Missing required request parameters"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "ValidateAll"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-appManagement/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"


  /models:
    get:
      tags:
      - "Models"
      summary: "Displays User accessible models (base and custom)"
      description: "Displays User accessible models (base and custom)"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "sortorder"
        in: "query"
        required: false
        type: "string"
      - name: "sortby"
        in: "query"
        required: false
        type: "string"
      - name: "projectionExpression"
        in: "query"
        type: "string"
        required: false
      - name: "modality"
        in: "query"
        type: "string"
        required: false
      - name: "action"
        in: "query"
        type: "string"
        required: false
      - name: "model-use"
        in: "query"
        type: "string"
        required: false
      responses:
        200:
          description: "Returns the models accessible to the user and its details"
          schema:
            $ref: "#/definitions/ModelsList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Missing required request parameters"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "ValidateAll"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-models/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
      - "Custom Models"
      summary: "Create a new custom model"
      description: "Create a new custom model"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "NewCustomModelBody"
        in: "body"
        required: false
        schema:
          $ref: "#/definitions/NewCustomModelBody"
      - name: "action"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/CreateCustomModelResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-models/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /models/{id}:
    get:
      tags:
      - "Models"
      summary: "Get details of a model"
      description: "Get details of a single model"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/ModelDetails"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-models/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    delete:
      tags:
      - "Models"
      summary: "Delete a custom model"
      description: "Delete a custom model"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-models/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    put:
      tags:
      - "Models"
      summary: "Enable/disable a model"
      description: "Enable/disable a model"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "action"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            type: "object"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-models/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /models/{id}/download:
    get:
      tags:
      - "Custom Models"
      summary: "Get presigned url to download custom model file"
      description: "Get presigned url to download custom model file"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "data-type"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            type: "object"
            properties:
              PresignedURL:
                type: "string"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-models/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /models/{id}/throughput:
    put:
      tags:
      - "Custom Models"
      summary: "Provision throughput for a model"
      description: "Provision throughput for a model"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "ProvisionThroughputBody"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/ProvisionThroughputBody"
      responses:
        200:
          description: "Successful API response"
          schema:
            type: "object"
            properties:
              Message:
                type: "string"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-models/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    delete:
      tags:
      - "Custom Models"
      summary: "Delete provision throughput for a model"
      description: "Delete provision throughput for a model"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-models/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"


  /agents/text-summarization:
    post:
      tags:
      - "Agent Text Summarization"
      summary: "agent api for text summarization"
      description: "Handle agent api for text summarization invoked from chat"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "TextSummarizationBody"
        in: "body"
        required: false
        schema:
          $ref: "#/definitions/TextSummarizationBody"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/TextSummarizationResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-textSummarization/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"

  /users:
    get:
      tags:
      - "Users"
      summary: "List all AI users"
      description: "List of all users that exists in the system"
      produces:
      - "application/json"
      parameters:
      - name: "projectionExpression"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/UserDetailsList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "ValidateAll"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-users/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
      - "Users"
      summary: "Create a user"
      description: "Creates a user in IDP, if the user doesn't exist"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Type"
        in: "header"
        type: "string"
      - in: "body"
        name: "UserInput"
        required: false
        schema:
          $ref: "#/definitions/UserAgreementStatus"
      responses:
        200:
          description: "Successful user creation"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-users/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /users/{id}:
    get:
      tags:
        - "Users"
      summary: "Get user details"
      description: "Returns details about a single user"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/UserDetails"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
        - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
          \ and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-users/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    put:
      tags:
        - "Users"
      summary: "Admin level actions on Users"
      description: "Udates user type"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
        - in: "body"
          name: "UserInput"
          schema:
            $ref: "#/definitions/UpdateUser"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
        - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
          \ and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-users/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /users/integrate-amorphic:
    post:
      tags:
      - "Users"
      summary: "Connect to amorphic"
      description: "Handle connect/disconnect/enable/disble operations from amorphic"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "action"
        in: "query"
        required: true
        type: "string"
        enum:
          - connect
          - disconnect
          - enable
          - disable
      - name: "IntegrateAmorphicBody"
        in: "body"
        required: false
        schema:
          $ref: "#/definitions/IntegrateAmorphic"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-users/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /{resource}/{id}/grants:
    put:
      tags:
      - "Resource Access"
      summary: "Grant/revoke access to a resource for list of users"
      description: "Grant/revoke access to a resource for list of users in the same call"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Type"
        in: "header"
        type: "string"
      - name: "resource"
        in: "path"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "UserAccess"
        required: true
        schema:
          $ref: "#/definitions/UserAccess"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-resourceAuthUsers/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "resource"
        in: "path"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /{resource}/{id}/authorizedusers:
    get:
      tags:
      - "Resource Access"
      summary: "Get authorized users of a resource"
      description: "Get authorized users for a resource"
      produces:
      - "application/json"
      parameters:
      - name: "resource"
        in: "path"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/AuthorizedUsers"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Missing required request parameters"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-resourceAuthUsers/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "resource"
        in: "path"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /users/{id}/alert-preferences:
    get:
      tags:
      - "Users"
      summary: "Alert preferences status of a user"
      description: "Get alert preferences status of a user"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Returns the status of alert preferences"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Internal failure"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-users/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
      - "Users"
      summary: "Subscribe for alerts"
      description: "Request to subscribe for alerts"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "Successfully sent verification link for alerts"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-users/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    delete:
      tags:
      - "Users"
      summary: "Un-subscribe user from alerts"
      description: "Un-subscribe user from alerts when requested"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "Successfully unsubscribed from alerts"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-users/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,DELETE,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /users/{id}/preferences:
    post:
      tags:
      - "Users"
      summary: "Set default domain and tenant"
      description: "Handles setting the default domain and tenant"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "UserPreferencesBody"
        in: "body"
        required: false
        schema:
          $ref: "#/definitions/UserPreferences"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-users/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  ### Amorphic APIs
  /amorphic/datasets:
    get:
      tags:
      - "Amorphic"
      summary: "List amorphic datasets"
      description: "List amorphic datasets"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/AmorphicDatasetsDetailsList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-workspaces/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /amorphic/tenants:
    get:
      tags:
      - "Amorphic"
      summary: "List amorphic tenants"
      description: "List amorphic datasets"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/AmorphicTenantsList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-users/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /amorphic/domains:
    get:
      tags:
      - "Amorphic"
      summary: "List amorphic domains"
      description: "List amorphic domains"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/AmorphicDomainsList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-users/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /amorphic/roles:
    get:
      tags:
      - "Amorphic"
      summary: "List amorphic roles"
      description: "List amorphic roles"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/AmorphicRolesList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-users/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  ### Chat APIs
  /chat/sessions:
    get:
      tags:
      - "Chat"
      summary: "List chat sessions"
      description: "List all chat sessions of the user."
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "sortorder"
        in: "query"
        required: false
        type: "string"
      - name: "sortby"
        in: "query"
        required: false
        type: "string"
      - name: "client-id"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/ChatSessionsList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-chat/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
      - "Chat"
      summary: "Create a new chat session"
      description: "Create a new chat session"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "client-id"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/NewChatSessionResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-chat/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /chat/sessions/{id}:
    get:
      tags:
      - "Chat"
      summary: "Retrieve chat session details"
      description: "Retrieve chat session details"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/ChatSessionDetails"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-chat/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    delete:
      tags:
      - "Chat"
      summary: "Delete a chat session"
      description: "Delete a chat session."
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-chat/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /chat/sessions/{id}/messages/{message_id}:
    get:
      tags:
      - "Chat"
      summary: "Retrieve chat message with id"
      description: "Retrieve chat message with id"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "message_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/ChatMessages"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-chat/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "message_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /chat/sessions/{id}/files:
    get:
      tags:
      - "Chat"
      summary: "Retrieve chat session files"
      description: "Retrieve chat session files"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/SessionFilesList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-chat/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
        - "Chat"
      summary: "Upload a single file to session"
      description: "Upload a single file to session"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "DeleteFile"
        in: "body"
        required: true
        schema:
          type: "object"
          properties:
            Filename:
              type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            type: "object"
            properties:
              PresignedURL:
                type: "string"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-chat/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    delete:
      tags:
      - "Chat"
      summary: "Delete session file"
      description: "Delete session file"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "Successfully deleted session file"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-chat/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /chat/sessions/{id}/files/dataset-upload:
    put:
      tags:
      - "Chat"
      summary: "Upload session files to a dataset"
      description: "Upload session files to a dataset"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "FilesDatasetDetails"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/FilesDatasetDetails"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-chat/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  ### Chatbot APIs
  /chatbots:
    get:
      tags:
      - "Chatbots"
      summary: "List of chatbots that user has access"
      description: "Returns chatbots and their metadata"
      parameters:
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "sortorder"
        in: "query"
        required: false
        type: "string"
      - name: "sortby"
        in: "query"
        required: false
        type: "string"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/ChatbotsList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-chatbots/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
      - "Chatbots"
      summary: "Create chatbot given input body"
      description: "Chatbot creation API"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "ChatbotBody"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/ChatbotDetails"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/CreateChatbotResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-chatbots/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /chatbots/{id}:
    get:
      tags:
      - "Chatbots"
      summary: "Get chatbot details given chatbotid in path"
      description: "Get details of a single chatbot"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/ChatbotDetails"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-chatbots/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    put:
      tags:
      - "Chatbots"
      summary: "Update chatbot details"
      description: "Given input payload update metadata and configuration of the chatbot"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "UpdateChatbotBody"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateChatbotBody"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-chatbots/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    delete:
      tags:
      - "Chatbots"
      summary: "Delete a chatbot"
      description: "Given chatbotId in path params, delete a chatbot"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-chatbots/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /embedded/chatbot/{id}:
    get:
      tags:
      - "Chatbots"
      summary: "Get basic UI details of the chatbot"
      description: "Gets details related to appearance of chatbot perferences, color schemes, avtar url, chatbot name, logo url etc.,"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Type"
        in: "header"
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/EmbeddedChatbotConfig"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-request-validator: "Validate body and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-embeddedChatbots/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /embedded/chatbot/{id}/sessions/{session_id}:
    get:
      tags:
      - "Chatbots"
      summary: "Get session details of the current instance"
      description: "Gets session chat history details"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Type"
        in: "header"
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "session_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/EmbeddedChatbotSessionDetails"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-request-validator: "Validate body and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-embeddedChatbots/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "session_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /embedded/chatbot/{id}/sessions/{session_id}/messages/{message_id}:
    post:
      tags:
      - "Chatbots"
      summary: "Flag a message from AI response"
      description: "To maintain details of inappropriate responses given by chatbot"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Type"
        in: "header"
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "message_id"
        in: "path"
        required: true
        type: "string"
      - name: "session_id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "FlagMessageBody"
        required: true
        schema:
          $ref: "#/definitions/FlagMessageBody"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/EmbeddedChatbotFlag"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-request-validator: "Validate body and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-embeddedChatbots/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "message_id"
        in: "path"
        required: true
        type: "string"
      - name: "session_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"

  ### Agents APIs
  /agents:
    get:
      tags:
      - "Agents"
      summary: "List of all agents"
      description: "List details of all agents"
      parameters:
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "sortorder"
        in: "query"
        required: false
        type: "string"
      - name: "sortby"
        in: "query"
        required: false
        type: "string"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/AgentsList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
      - "Agents"
      summary: "Create a new agent"
      description: "Create a new agent"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "CreateAgentBody"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateAgentBody"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/CreateAgentResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /agents/{id}:
    get:
      tags:
      - "Agents"
      summary: "Get details of an agent"
      description: "Get details of a single agent"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/AgentDetails"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    delete:
      tags:
      - "Agents"
      summary: "Delete an agent"
      description: "Delete an agent"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    put:
      tags:
      - "Agents"
      summary: "Update an agent"
      description: "Update an agent"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "action"
        in: "query"
        required: false
        type: "string"
      - name: "UpdateAgentBody"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateAgentBody"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /agents/{id}/action-groups:
    get:
      tags:
      - "Agents"
      summary: "Get details of action groupas attached to an agent"
      description: "Get details of action groupas attached to an agent"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/AgentActionGroupsDetails"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    put:
      tags:
      - "Agents"
      summary: "Update agent action groups"
      description: "Update agent action groups"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "UpdateAgentActionGroupsBody"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateAgentActionGroupsBody"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /agents/action-groups:
    get:
      tags:
      - "Action Groups"
      summary: "List of all action groups"
      description: "List details of all action groups"
      parameters:
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "sortorder"
        in: "query"
        required: false
        type: "string"
      - name: "sortby"
        in: "query"
        required: false
        type: "string"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/ActionGroupsList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
      - "Action Groups"
      summary: "Create a new action group"
      description: "Create a new action group"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "CreateActionGroupBody"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateActionGroupBody"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/CreateActionGroupResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /agents/action-groups/{id}:
    get:
      tags:
      - "Action Groups"
      summary: "Get details of an action group"
      description: "Get details of a single action group"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/ActionGroupDetails"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    delete:
      tags:
      - "Action Groups"
      summary: "Delete an action group"
      description: "Delete an action group"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    put:
      tags:
      - "Action Group"
      summary: "Update an action group"
      description: "Update an action group"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "UpdateAgentBody"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateActionGroupBody"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /agents/action-groups/{id}/logs:
    get:
      tags:
      - "Action Groups"
      summary: "Fetch logs of an action group lambda"
      description: "Fetch logs of an action group lambda"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "start-time"
        in: "query"
        required: true
        type: "string"
      - name: "end-time"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/ActionGroupLogsResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "ValidateAll"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /agents/libraries:
    get:
      tags:
      - "Agent Libraries"
      summary: "List of all agent libraries"
      description: "List details of all agent libraries"
      parameters:
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "sortorder"
        in: "query"
        required: false
        type: "string"
      - name: "sortby"
        in: "query"
        required: false
        type: "string"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/AgentLibrariesList"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
      - "Agent Libraries"
      summary: "Create a new agent library"
      description: "Create a new agent library"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "CreateActionGroupBody"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateAgentLibraryBody"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/CreateAgentLibraryResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /agents/libraries/{id}:
    get:
      tags:
      - "Agent Libraries"
      summary: "Get details of an agent library"
      description: "Get details of a single agent library"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/AgentLibraryDetails"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    delete:
      tags:
      - "Agent Libraries"
      summary: "Delete an agent library"
      description: "Delete an agent library"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    put:
      tags:
      - "Agent Libraries"
      summary: "Update an agent library"
      description: "Update an agent library"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "UpdateAgentBody"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/UpdateAgentLibraryBody"
      responses:
        200:
          description: "Successful API response"
          schema:
            $ref: "#/definitions/Status"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "Something went wrong at backend"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - LambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        credentials: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/projectshortname_placeholder-APIGateway-Lambda-ExecutionRole"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:projectshortname_placeholder-verticalname_placeholder-environment_placeholder-agents/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      tags:
      - "Options"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"


definitions:
  Status:
    type: "object"
    properties:
      Message:
        type: "string"
    title: "Status"
  Error:
    type: "object"
    properties:
      Message:
        type: "string"
    title: "Error"

  AmorphicDatasetsDetailsList:
    title: "AmorphicDatasetsDetailsList"
    type: "object"
    properties:
      Datasets:
        type: "array"
        items:
          type: "object"
          properties:
            DatasetId:
              type: "string"
            DatasetName:
              type: "string"
            DatasetDescription:
              type: "string"
            Domain:
              type: "string"
            FileType:
              type: "string"
            TargetLocation":
              type: "string"
            TenantName:
              type: "string"
            CreatedBy:
              type: "string"
  AmorphicTenantsList:
    title: "AmorphicTenantsList"
    type: "object"
    properties:
      Tenants:
        type: "array"
        items:
          type: "object"
          properties:
            TenantName:
              type: "string"
            DisplayName:
              type: "string"
            TenantDescription:
              type: "string"
  AmorphicDomainsList:
    title: "AmorphicDomainsList"
    type: "object"
    properties:
      Tenants:
        type: "array"
        items:
          type: "object"
          properties:
            DomainName:
              type: "string"
            DisplayName:
              type: "string"
            DomainDescription:
              type: "string"
  AmorphicRolesList:
    title: "AmorphicRolesList"
    type: "object"
    properties:
      Roles:
        type: "array"
        items:
          type: "object"
          properties:
            RoleId:
              type: "string"
            RoleName:
              type: "string"

  WorkspaceBasicDetails:
    title: "WorkspaceBasicDetails"
    type: "object"
    properties:
      AccessType:
        type: "string"
      WorkspaceId:
        type: "string"
      WorkspaceName:
        type: "string"
      TriggerType:
        type: "string"
      ScheduleExpression:
        type: "string"
      Description:
        type: "string"
      LastModifiedTime:
        type: "string"
      LastModifiedBy:
        type: "string"
  WorkspaceDetails:
    title: "WorkspaceDetails"
    allOf:
      - $ref: "#/definitions/WorkspaceBasicDetails"
      - type: "object"
        properties:
          SourceFileSyncStatus:
            type: "string"
          DatasetsAttached:
            type: "object"
            properties:
              DomainName:
                type: "array"
                items:
                  type: "string"
          CreatedBy:
            type: "string"
          CreationDate:
            type: "string"
          Keywords:
            type: "array"
            items:
              type: "string"
  WorkspacesList:
    title: "WorkspacesList"
    type: "object"
    properties:
      Workspaces:
        type: "array"
        items:
          $ref: "#/definitions/WorkspaceBasicDetails"
  NewWorkspaceBody:
    title: "NewWorkspaceBody"
    type: "object"
    properties:
      WorkspaceName:
        type: "string"
      Description:
        type: "string"
      TriggerType:
        type: "string"
      ScheduleExpression:
        type: "string"
      AttachedDatasets:
        type: "array"
        items:
          type: "string"
      Keywords:
        type: "array"
        items:
          type: string
      EmbeddingsModel:
        type: "string"
      ChunkingConfig:
        type: "object"
        properties:
          MaxTokens:
            type: "integer"
          OverlapPercentage:
            type: "integer"
  CreateWorkspaceResponse:
    title: "CreateWorkspaceResponse"
    type: "object"
    properties:
      WorkspaceId:
        type: "string"
      Message:
        type: "string"
  UpdateWorkspaceBody:
    title: "UpdateWorkspaceBody"
    type: "object"
    properties:
      TriggerType:
        type: "string"
      ScheduleExpression:
        type: "string"
      Description:
        type: "string"
      Keywords:
        type: "array"
        items:
          type: "string"
  WorkspaceDocumentsList:
    title: "WorkspaceDocumentsList"
    type: "object"
    properties:
      Files:
        type: "array"
        items:
          type: "object"
          properties:
            DocumentType:
              type: "string"
            DocumentId:
              type: "string"
            DocumentDetails:
              type: "object"
              properties:
                FileName:
                  type: "string"
                DatasetId:
                  type: "string"
                WebsiteURL:
                  type: "string"
            LastModifiedTime:
              type: "string"
            LastModifiedBy:
              type: "string"
            Message:
              type: "string"
      next_available:
        type: "string"
      count:
        type: "integer"
      total_count:
        type: "integer"
  WorkspaceDocumentDetails:
    title: "WorkspaceDocumentDetails"
    type: "object"
    properties:
      DocumentType:
        type: "string"
      DocumentId:
        type: "string"
      DocumentDetails:
        type: "object"
        properties:
          FileName:
            type: "string"
          DatasetId:
            type: "string"
          WebsiteURL:
            type: "string"
      LastModifiedTime:
        type: "string"
      LastModifiedBy:
        type: "string"
  WorkspaceRunDetails:
    title: "WorkspaceRunDetails"
    type: "object"
    properties:
      RunId:
        type: "string"
      StartTime:
        type: "string"
      EndTime:
        type: "string"
      TriggerType:
        type: "string"
      RunStatus:
        type: "string"
      LastModifiedTime:
        type: "string"
      TriggeredBy:
        type: "string"
      Message:
        type: "string"
  WorkspaceRunsList:
    title: "WorkspaceRunsList"
    type: "object"
    properties:
      Runs:
        type: "array"
        items:
          $ref: "#/definitions/WorkspaceRunDetails"
  WorkspaceRunResponse:
    title: "WorkspaceRunResponse"
    type: "object"
    properties:
      Message:
        type: "string"
      RunId:
        type: "string"
  WorkspaceRunsStats:
    title: "WorkspaceRunsStats"
    type: "object"
    properties:
      LatestRunInfo:
        type: "object"
        properties:
          DocumentsScanned:
            type: "integer"
          DocumentsIndexed:
            type: "integer"
          ModifiedDocumentsIndexed:
            type: "integer"
          DocumentsDeleted:
            type: "integer"
          DocumentsFailed:
            type: "integer"
  SystemConfiguration:
    type: object
    properties:
      RagEngines:
        type: "object"
    title: "SystemConfiguration"
  UpdateSystemConfiguration:
    type: "object"
    properties:
      RagEngines:
        type: "object"
    title: "UpdateSystemConfiguration"
  UserDetails:
    type: "object"
    title: "UserDetails"
    properties:
      UserId:
        type: "string"
      EmailId:
        type: "string"
      IsActive:
        type: "string"
      FullName:
        type: "string"
      UserType:
        type: "string"
      Groups:
        type: "array"
        items:
          type: "object"
      DefaultDomain:
        type: "string"
      AmorphicIntegrationStatus:
        type: "string"
      RoleId:
        type: "string"
      UserCreationDate:
        type: "string"
  UserDetailsList:
    title: "UserDetailsList"
    properties:
      Runs:
        type: "array"
        items:
          $ref: "#/definitions/UserDetails"
  UpdateUser:
    type: "object"
    properties:
      Action:
        type: "string"
      UserType:
        type: "string"
  UserAgreementStatus:
    type: "object"
    properties:
      Message:
        type: "string"
      Version:
        type: "string"
    title: "UserAgreementStatus"
  UserAccess:
    type: "object"
    required:
      - "AccessType"
      - "Users"
    properties:
      AccessType:
        type: "string"
        enum:
          - owner
          - read-only
      Users:
        type: "array"
        items:
          type: "string"
    title: "UserAccess"
  UserPreferences:
    title: "UserPreferences"
    type: "object"
    properties:
      DomainName:
        type: "string"
      TenantName:
        type: "string"
  AuthorizedUsers:
    type: "object"
    properties:
      Users:
        type: "object"
        properties:
          owners:
            type: "array"
            items:
              type: "object"
              properties:
                EmailId:
                  type: "string"
                UserId:
                  type: "string"
                Name:
                  type: "string"
          readOnly:
            type: "array"
            items:
              type: "object"
              properties:
                EmailId:
                  type: "string"
                UserId:
                  type: "string"
                Name:
                  type: "string"
    title: "AuthorizedUsers"
  IntegrateAmorphic:
    title: "IntegrateAmorphic"
    type: "object"
    properties:
      RoleId:
        type: "string"
      Token:
        type: "string"
  TextSummarizationBody:
    title: "TextSummarizationBody"
    type: "object"
    properties:
      S3URI:
        type: "string"
  TextSummarizationResponse:
    title: "TextSummarizationResponse"
    type: "object"
    properties:
      Message:
        type: "string"
      Status:
        type: "string"
  ChatSessionBasicDetails:
    title: "ChatSessionBasicDetails"
    type: "object"
    properties:
      SessionId:
        type: "string"
      Title:
        type: "string"
      CreationTime:
        type: "string"
      LastModifiedTime:
        type: "string"
  ChatSessionsList:
    title: "ChatSessionsList"
    type: "object"
    properties:
      Pipelines:
        type: "array"
        items:
          $ref: '#/definitions/ChatSessionBasicDetails'
  ChatSessionDetails:
    title: "ChatSessionDetails"
    allOf:
      - $ref: '#/definitions/ChatSessionBasicDetails'
      - type: "object"
        properties:
          History:
            type: "array"
            items:
              type: "string"
  NewChatSessionResponse:
    title: "NewChatSessionResponse"
    type: "object"
    properties:
      Message:
        type: "string"
      SessionId:
        type: "string"
  ChatbotDetails:
    type: "object"
    properties:
      ChatbotId:
        type: "string"
      ChatbotName:
        type: "string"
      Description:
        type: "string"
      Keywords:
        type: "array"
        items:
          type: "string"
      CreatedBy:
        type: "string"
      CreationTime:
        type: "string"
      LastModifiedBy:
        type: "string"
      LastModificationTime:
        type: "string"
      AccessType:
        type: "string"
      Workspace:
        type: "string"
      Model:
        type: "string"
      Status:
        type: "string"
      EmbeddedConfig:
        $ref: '#/definitions/EmbeddedConfig'
      KeepActive:
        type: "boolean"
      Instructions:
        type: "string"
      EnableRedaction:
        type: "boolean"
    title: "ChatbotDetails"
  CreateChatbotResponse:
    type: "object"
    properties:
      ChatbotId:
        type: "string"
      Message:
        type: "string"
    title: "CreateChatbotResponse"
  ChatbotsList:
    type: "object"
    properties:
      Chatbots:
        type: "array"
        items:
          $ref: "#/definitions/ChatbotDetails"
    title: "ChatbotsList"
  UpdateChatbotBody:
    type: "object"
    properties:
      Model:
        type: "string"
      Workspace:
        type: "string"
      Description:
        type: "string"
      Keywords:
        type: "array"
        items:
          type: "string"
      KeepActive:
        type: "boolean"
    title: "UpdateChatbotBody"
  SessionFilesList:
    title: "SessionFilesList"
    type: "array"
    items:
      type: "string"
  FilesDatasetDetails:
    title: "FilesDatasetDetails"
    type: object
    properties:
      Files:
        type: "array"
        items:
          type: "string"
      DatasetId:
        type: "string"
  ModelsList:
    title: "ModelsList"
    type: "object"
    properties:
      Models:
        type: "array"
        items:
          type: "object"
          properties:
            ModelId:
              type: "string"
            ModelName:
              type: "string"
            ModelType:
              type: "string"
            ModelProvider:
              type: "string"
            AvailabilityStatus:
              type: "string"
            UserAccessible:
              type: "string"
            LastModifiedTime:
              type: "string"
            Modality:
              type: "string"
            CustomizationsSupported:
              type: "array"
              items:
                type: "string"
            Description:
              type: "string"
      next_available:
        type: "string"
      count:
        type: "integer"
      total_count:
        type: "integer"
  ModelDetails:
    title: "ModelDetails"
    type: "object"
    properties:
      ModelId:
        type: "string"
      ModelName:
        type: "string"
      ModelType:
        type: "string"
      ModelArn:
        type: "string"
      ModelProvider:
        type: "string"
      AvailabilityStatus:
        type: "string"
      UserAccessible:
        type: "string"
      LastModifiedTime:
        type: "string"
      LastModifiedBy:
        type: "string"
      Modality:
        type: "string"
      CustomizationsSupported:
        type: "string"
      Description:
        type: "string"
      IsStreamingEnabled:
        type: "string"
      CreationTime:
        type: "string"
      CreatedBy:
        type: "string"
      AdditionalConfiguration:
        type: "object"
        properties:
          CustomizationType:
            type: "string"
          BaseModelId:
            type: "string"
          BaseModelName:
            type: "string"
          HyperParameters:
            type: "object"
          OutputDataLocation:
            type: "string"
          ValidationDataLocation:
            type: "string"
          TrainingDataValidation:
            type: "string"
          Message:
            type: "string"
          Status:
            type: "string"
  EmbeddedChatbotConfig:
    title: EmbeddedChatbotConfig
    type: object
    properties:
      EmbeddedConfig:
        $ref: '#/definitions/EmbeddedConfig'
  EmbeddedConfig:
    type: object
    title: EmbeddedConfig
    properties:
      ColorScheme:
        type: object
        properties:
          PrimaryColor:
            type: string
          TextColor:
            type: string
          SecondaryColor:
            type: string
      BotAvatar:
        type: string
      BotName:
        type: string
      BotDescription:
        type: string
      BotWelcomeMessage:
        type: string
  SessionChatbotHistory:
    title: SessionChatbotHistory
    type: object
    properties:
      MessageId:
        type: string
      Message:
        type: string
      MessageTime:
        type: string
  EmbeddedChatbotSessionDetails:
    title: EmbeddedChatbotSessionDetails
    type: object
    properties:
      SessionId:
        type: string
      History:
        type: array
        items:
          $ref: '#/definitions/SessionChatbotHistory'
  EmbeddedChatbotFlag:
    title: EmbeddedChatbotFlag
    type: object
    properties:
      Flag:
        type: string
      Message:
        type: string

  ChatMessage:
    title: "ChatMessage"
    type: "object"
    properties:
      Type:
        type: "string"
      MessageTime:
        type: "string"
      Data:
        type: "string"
      ResponseTime:
        type: "string"
  ChatMessages:
    title: "ChatMessages"
    type: "array"
    items:
      $ref: '#/definitions/ChatMessage'
  NewCustomModelBody:
    title: "NewCustomModelBody"
    type: "object"
    properties:
      ModelName:
        type: "string"
      CustomizationType:
        type: "string"
      BaseModelId:
        type: "string"
      Description:
        type: "string"
      TrainingDataLocation:
        type: "string"
      ValidationDataLocation:
        type: "string"
      HyperParameters:
        type: "object"
        properties:
          epochs:
            type: string
  CreateCustomModelResponse:
    title: "CreateCustomModelResponse"
    type: "object"
    properties:
      Message:
        type: "string"
      ModelId:
        type: "string"
  ProvisionThroughputBody:
    title: "ProvisionThroughputBody"
    type: "object"
    properties:
      ModelUnits:
        type: "integer"
  FlagMessageBody:
    title: "FlagMessageBody"
    type: "object"
    properties:
      Flag:
        type: "boolean"
      MessageTime:
        type: "string"
      Message:
        type: "string"
  AgentsList:
    title: "AgentsList"
    type: "object"
    properties:
      Agents:
        type: "array"
        items:
          type: "object"
          properties:
            AgentId:
              type: "string"
            Description:
              type: "string"
            AgentStatus:
              type: "string"
            ReferenceId:
              type: "string"
            AgentName:
              type: "string"
            BaseModel:
              type: "string"
            Instruction:
              type: "string"
            CreatedBy:
              type: "string"
            CreationTime:
              type: "string"
            LastModifiedBy:
              type: "string"
            LastModifiedTime:
              type: "string"
      next_available:
        type: "string"
      count:
        type: "integer"
      total_count:
        type: "integer"
  AgentLibrariesList:
    title: "AgentLibrariesList"
    type: "object"
    properties:
      Libraries:
        type: "array"
        items:
          type: "object"
          properties:
            LibraryName:
              type: "string"
            Description:
              type: "string"
            LibraryId:
              type: "string"
            Packages:
              type: "array"
              items:
                type: "string"
            CreatedBy:
              type: "string"
            CreationTime:
              type: "string"
            LastModifiedBy:
              type: "string"
            LastModifiedTime:
              type: "string"
      next_available:
        type: "string"
      count:
        type: "integer"
      total_count:
        type: "integer"
  CreateAgentBody:
    title: "CreateAgentBody"
    type: "object"
    properties:
      AgentName:
        type: "string"
      BaseModel:
        type: "string"
      Description:
        type: "string"
      Instruction:
        type: "string"
      QueryFollowUp:
        type: "string"
  CreateAgentLibraryBody:
    title: "CreateAgentLibraryBody"
    type: "object"
    properties:
      LibraryName:
        type: "string"
      Description:
        type: "string"
  CreateActionGroupBody:
    title: "CreateActionGroupBody"
    type: "object"
    properties:
      ActionGroupId:
        type: "string"
      ActionGroupName:
        type: "string"
      Description:
        type: "string"
      LambdaS3Path:
        type: "string"
      LambdaHandler:
        type: "string"
      ApiDefS3Path:
        type: "string"
      AttachedLibraries:
        type: "array"
        items:
          type: "string"
  UpdateAgentBody:
    title: "UpdateAgentBody"
    type: "object"
    properties:
      Description:
        type: "string"
      BaseModel:
        type: "string"
      Instruction:
        type: "string"
  UpdateActionGroupBody:
    title: "UpdateActionGroupBody"
    type: "object"
    properties:
      Description:
        type: "string"
      LambdaS3Path:
        type: "string"
      ApiDefS3Path:
        type: "string"
      LambdaHandler:
        type: "string"
      AttachedLibraries:
        type: "array"
        items:
          type: "string"
  CreateAgentResponse:
    title: "CreateAgentResponse"
    type: "object"
    properties:
      Message:
        type: "string"
      AgentId:
        type: "string"
  CreateAgentLibraryResponse:
    title: "CreateAgentResponse"
    type: "object"
    properties:
      Message:
        type: "string"
      LibraryId:
        type: "string"
  CreateActionGroupResponse:
    title: "CreateActionGroupResponse"
    type: "object"
    properties:
      Message:
        type: "string"
      ActionGroupId:
        type: "string"
  AgentDetails:
    title: "AgentDetails"
    type: "object"
    properties:
      AgentId:
        type: "string"
      Description:
        type: "string"
      AgentStatus:
        type: "string"
      ReferenceId:
        type: "string"
      AgentName:
        type: "string"
      BaseModel:
        type: "string"
      Instruction:
        type: "string"
      CreatedBy:
        type: "string"
      CreationTime:
        type: "string"
      LastModifiedBy:
        type: "string"
      LastModifiedTime:
        type: "string"
      QueryFollowUp:
        type: "string"
      AgentArn:
        type: "string"
      AttachedActionGroups:
        type: "array"
        items:
          type: "object"
          properties:
            ActionGroupId:
              type: "string"
            ActionGroupName:
              type: "string"
            ReferenceId:
              type: "string"
  ActionGroupDetails:
    title: "ActionGroupDetails"
    type: "object"
    properties:
      ActionGroupId:
        type: "string"
      ActionGroupName:
        type: "string"
      Description:
        type: "string"
      LambdaArn:
        type: "string"
      ApiDefS3Uri:
        type: "string"
      CreatedBy:
        type: "string"
      CreationTime:
        type: "string"
      LastModifiedBy:
        type: "string"
      LastModifiedTime:
        type: "string"
      AttachedLibraries:
        type: "array"
        items:
          type: "string"
  ActionGroupLogsResponse:
    title: "ActionGroupLogsResponse"
    type: "object"
    properties:
      Message:
        type: "string"
      PresignedURL:
        type: "string"
  AgentLibraryDetails:
    title: "AgentLibraryDetails"
    type: "object"
    properties:
      LibraryName:
        type: "string"
      LibraryId:
        type: "string"
      Description:
        type: "string"
      Packages:
        type: "array"
        items:
          type: "string"
      CreatedBy:
        type: "string"
      CreationTime:
        type: "string"
      LastModifiedBy:
        type: "string"
      LastModifiedTime:
        type: "string"
  AgentActionGroupsDetails:
    title: "AgentActionGroupsDetails"
    type: "object"
    properties:
      ActionGroups:
        type: "array"
        items:
          type: "object"
          properties:
            ActionGroupId:
              type: "string"
            ActionGroupName:
              type: "string"
            ReferenceId:
              type: "string"
            Description:
              type: "string"
            LambdaArn:
              type: "string"
            ApiDefS3Uri:
              type: "string"
            CreatedBy:
              type: "string"
            CreationTime:
              type: "string"
            LastModifiedBy:
              type: "string"
            LastModifiedTime:
              type: "string"
  UpdateAgentActionGroupsBody:
    title: "UpdateAgentActionGroupsBody"
    type: "object"
    properties:
      ActionGroups:
        type: "array"
        items:
          type: "string"
  UpdateAgentLibraryBody:
    title: "UpdateAgentLibraryBody"
    type: "object"
    properties:
      Description:
        type: "string"
      Packages:
        type: "array"
        items:
          type: "string"
  ActionGroupsList:
    title: "ActionGroupsList"
    type: "object"
    properties:
      ActionGroups:
        type: "array"
        items:
          type: "object"
          properties:
            ActionGroupId:
              type: "string"
            Description:
              type: "string"
            ActionGroupName:
              type: "string"
            LambdaArn:
              type: "string"
            ApiDefS3Uri:
              type: "string"
            CreatedBy:
              type: "string"
            CreationTime:
              type: "string"
            LastModifiedBy:
              type: "string"
            LastModifiedTime:
              type: "string"
      next_available:
        type: "string"
      count:
        type: "integer"
      total_count:
        type: "integer"
  WebCrawlingBody:
    title: "WebCrawlingBody"
    type: "object"
    properties:
      WebsiteURL:
        type: "string"
      PageLimit:
        type: "integer"
      FollowLinks:
        type: "boolean"
  WorkspaceWebCrawlingList:
    title: "WorkspaceWebCrawlingList"
    type: "object"
    properties:
      WebCrawlings:
        type: "object"
        properties:
          CrawlId:
            type: "string"
          WebsiteURL:
            type: "string"
          Status:
            type: "string"
          LastModifiedTime:
            type: "string"
          LastModifiedBy:
            type: "string"
      next_available:
        type: "string"
      count:
        type: "integer"
      total_count:
        type: "integer"
  WebCrawlingResponse:
    title: "WebCrawlingResponse"
    type: "object"
    properties:
      CrawlId:
        type: "string"
      Message:
        type: "string"
  ListNestedURLs:
    title: "ListNestedURLs"
    type: "object"
    properties:
      Websites:
        type: "array"
        items:
          type: "object"
          properties:
            URL:
              type: "string"
            Indexed:
              type: "boolean"
      Status:
        type: "string"
      next_available:
        type: "string"
      count:
        type: "integer"
      total_count:
        type: "integer"
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'POST,OPTIONS,PUT,GET'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    responseTemplates:
      "application/json": "{\"Message\": $context.error.messageString}"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'POST,OPTIONS,PUT,GET'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    responseTemplates:
      "application/json": "{\"Message\": $context.error.messageString}"
  ACCESS_DENIED:
    statusCode: "403"
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    responseTemplates:
      "application/json": "{\"Message\": \"$context.authorizer.message\"}"
x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
  Validate query string parameters and headers:
    validateRequestParameters: true
    validateRequestBody: false
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true
  Validate body and headers:
    validateRequestParameters: false
    validateRequestBody: true
  ValidateAll:
    validateRequestParameters: true
    validateRequestBody: true
x-amazon-apigateway-binary-media-types:
- "text/csv"
- "application/octet-stream"