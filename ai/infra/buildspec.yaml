version: 0.2

phases:
  pre_build:
    commands:
      - echo account id is $account_id
      - echo deployment environment is $deployment_environment
      - echo deployment triggered by user - $user_id
      - echo preparing to deploy AI into region - $deploy_region
      - echo customer account core bucket name is $core_bucket_name
      - echo artifacts bucket name is $artifacts_bucket_name
      - echo api artifacts prefix is $artifacts_prefix
      - echo project short name is $project_short_name
      - echo cross account role arn is $cross_account_role_arn
      - echo cross_account_externalid is $cross_account_externalid
      - echo vertical name is $vertical_name
      - echo ACM certificate arn is set to $acm_certificate_arn
      - echo ACM Domain Alias is set to $acm_domain_alias
      - echo Web Bucket Name is set to $web_bucket_name
      - echo The source account's ECR images's tag name for AI is $tag_name
      # Env varibales for docker operations
      - echo CMP ECR account id $cmp_account_id
      - echo CICD ECR account region $cmp_region
      - echo CMP ecr repo uri is $cmp_ecr_repo_uri
      # Download CF templates from artifacts bucket
      - echo downloading CF templates to local
      - aws s3 cp s3://$artifacts_bucket_name/$artifacts_prefix/cf-templates/verticals/ai/ai-infra-master-cf.yaml .
      - aws s3 cp s3://$artifacts_bucket_name/$artifacts_prefix/cf-templates/verticals/ai/ai-api-master-cf.yaml .
      # Download webapp code from artifacts bucket
      - echo downloading webapp code contents to local
      - aws s3 cp s3://$artifacts_bucket_name/$artifacts_prefix/verticals/ai/web-app/ ./web-app --recursive --quiet
      - echo command ls output is...
      - ls -altr
      # Pull image from ECR (CMP - master/develop)
      - |
        if [ "$deployment_source" = "CMP" ]; then
          aws ecr get-login-password --region $cmp_region | docker login --username AWS --password-stdin $cmp_account_id.dkr.ecr.$cmp_region.amazonaws.com
          docker pull ${cmp_ecr_repo_uri}:${tag_name}
          # Download cleanupUtil from CMP artifact bucket
          aws s3 cp s3://$artifacts_bucket_name/$artifacts_prefix/cleanup-util/cleanupUtil.py .
        else
          # Download cleanupUtil from dev env core bucket
          aws s3 cp s3://${core_bucket_name}/cleanup-util/cleanupUtil.py .
        fi
      # Assume cross account role,save credentials to access_credentials file and execute the file
      - aws sts assume-role --role-arn ${cross_account_role_arn} --role-session-name verticals-cicd --external-id ${cross_account_externalid} > tmp.json;
      - echo "export AWS_ACCESS_KEY_ID=`cat tmp.json | jq '.Credentials.AccessKeyId'`" > access_credentials
      - echo "export AWS_SECRET_ACCESS_KEY=`cat tmp.json | jq '.Credentials.SecretAccessKey'`" >> access_credentials
      - echo "export AWS_SESSION_TOKEN=`cat tmp.json | jq '.Credentials.SessionToken'`" >> access_credentials
      - echo "export AWS_REGION=$deploy_region">> access_credentials
      - . ./access_credentials
  build:
    commands:
      - echo starting API deploy process
      # Updating AI specific parameters in SSM
      - if [ "$enable_fips" = "no" ]; then api_custom_domain_name="no"; fi
      - aws ssm put-parameter --name "AMORPHIC.AI.CONFIG.VERTICALNAME" --value $vertical_name --type String --overwrite
      - aws ssm put-parameter --name "AMORPHIC.AI.CONFIG.ACMCERTIFICATEARN" --value $acm_certificate_arn --type String --overwrite
      - aws ssm put-parameter --name "AMORPHIC.AI.CONFIG.RAGENGINES" --value $rag_engines --type String --overwrite
      - aws ssm put-parameter --name "AMORPHIC.AI.CONFIG.SUMMARIZATIONMODELS" --value $summarization_models --type String --overwrite
      - aws ssm put-parameter --name "AMORPHIC.AI.CONFIG.ACMDOMAINALIAS" --value $acm_domain_alias --type String --overwrite
      - aws ssm put-parameter --name "AMORPHIC.AI.CONFIG.APICUSTOMDOMAINNAME" --value $api_custom_domain_name --type String --overwrite
      - echo deploying infra stack
      # AWS CloudFormation - Deploy commands - All Infra related resources
      - aws cloudformation deploy --template-file ai-infra-master-cf.yaml --stack-name ${project_short_name}-${deployment_environment}-verticals-ai-infra --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --role-arn ${cross_account_role_arn} --s3-bucket ${core_bucket_name} --s3-prefix cf-templates/${deployment_environment}/verticals/ai/infra --no-fail-on-empty-changeset
      - |
        if [ "$deployment_source" = "CMP" ]; then
          # Get SSM parameter for ECR Repository URI
          target_ecr_repo_uri="$(aws ssm get-parameter --name "AMORPHIC.COREBUCKET.LAMBDAECRREPOSITORY" --output text --query 'Parameter.Value')"
          # Tag and push AI Lambda image to target account's ECR
          docker tag ${cmp_ecr_repo_uri}:${tag_name} ${target_ecr_repo_uri}:${tag_name}
          # Logging into Amazon ECR of target account
          echo Logging in to Amazon ECR of target account
          aws ecr get-login-password --region $deploy_region | docker login --username AWS --password-stdin $account_id.dkr.ecr.$deploy_region.amazonaws.com
          # Push the image to ECR of target account
          echo Pushing the AI Lambda Docker image to target account ECR
          docker push ${target_ecr_repo_uri}:${tag_name}
          echo image pushed successfully to target account
        fi
      # AWS CloudFormation - Deploy commands - All API related resources
      - echo deploying api stack
      - |
        if [ "$deployment_source" = "CMP" ]; then
          aws cloudformation deploy --template-file ai-api-master-cf.yaml --stack-name ${project_short_name}-${deployment_environment}-verticals-ai-api --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --role-arn ${cross_account_role_arn} --s3-bucket ${core_bucket_name} --s3-prefix cf-templates/${deployment_environment}/verticals/ai/api --parameter-overrides "pSSMFileLoadStatusTableStreamArn=/${project_short_name}/${deployment_environment}/dynamoDB/FileLoadStatusTableStreamArn" "pSSMArtifactsPrefixPlaceholder=${artifacts_prefix}" --no-fail-on-empty-changeset || true
        else
          aws ssm put-parameter --name "AMORPHIC.AI.CONFIG.AILAMBDAECRTAG" --value $tag_name --type String --overwrite
          aws cloudformation deploy --template-file ai-api-master-cf.yaml --stack-name ${project_short_name}-${deployment_environment}-verticals-ai-api --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --role-arn ${cross_account_role_arn} --s3-bucket ${core_bucket_name} --s3-prefix cf-templates/${deployment_environment}/verticals/ai/api --parameter-overrides "pSSMFileLoadStatusTableStreamArn=/${project_short_name}/${deployment_environment}/dynamoDB/FileLoadStatusTableStreamArn" "pSSMArtifactsPrefixPlaceholder=${artifacts_prefix}" "pSSMAILambdaECRTag=AMORPHIC.AI.CONFIG.AILAMBDAECRTAG" --no-fail-on-empty-changeset || true
        fi
      - |
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${project_short_name}-${deployment_environment}-verticals-ai-api --query 'Stacks[0].StackStatus' --output text)
        if [ "$STACK_STATUS" = "CREATE_FAILED" ] || [ "$STACK_STATUS" = "ROLLBACK_FAILED" ] || [ "$STACK_STATUS" = "DELETE_FAILED" ]; then
        echo "Stack in failure state: $STACK_STATUS. Initiating cleanup."
        python -c "
        import os
        import boto3
        import cleanupUtil

        PROJECT_SHORT_NAME = os.environ['project_short_name']
        ENVIRONMENT = os.environ['deployment_environment']
        REGION = os.environ['AWS_REGION']
        ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
        SECRET_KEY = os.environ['AWS_SECRET_ACCESS_KEY']
        SESSION_TOKEN = os.environ['AWS_SESSION_TOKEN']
        VERTICAL_NAME = os.environ['vertical_name']

        boto3_session = boto3.Session(
          aws_access_key_id=ACCESS_KEY_ID,
          aws_secret_access_key=SECRET_KEY,
          aws_session_token=SESSION_TOKEN,
          region_name=REGION
        )

        event = {
          'Configurations': {
            'ProjectShortName': PROJECT_SHORT_NAME,
            'Environment': ENVIRONMENT,
            'Region': REGION
          }
        }

        cleanupUtil.remove_deletion_protection(event, boto3_session, VERTICAL_NAME)
        "
        exit 1
        else
        echo "No failure state detected. Exiting without cleanup."
        fi
      - |
        if [ "$enable_fips" = "yes" ]; then
          rest_api_id=$(aws ssm get-parameter --name AMORPHIC.AI.API.APIGATEWAY --with-decryption --output text --query Parameter.Value)
          echo $rest_api_id
          execute_api_endpoint_status=$(aws apigateway get-rest-api --rest-api-id $rest_api_id | jq .'disableExecuteApiEndpoint')
          echo $execute_api_endpoint_status
          if [ "$execute_api_endpoint_status" = "false" ]; then
            aws apigateway update-rest-api --rest-api-id $rest_api_id --patch-operations op=replace,path=/disableExecuteApiEndpoint,value='True'
            aws apigateway create-deployment --rest-api-id $rest_api_id --stage-name $deployment_environment
          fi
        fi
      - echo API deploy process is completed, starting UI build and deploy
      # UI deploy commands
      # Fetch the Cognito, cloudfront and API gateway related details from SSM
      - cognito_user_pool_id="$(aws ssm get-parameter --name "AMORPHIC.COGNITO.USERPOOLID" --output text --query 'Parameter.Value')"
      - cognito_identity_pool_id="$(aws ssm get-parameter --name "AMORPHIC.COGNITO.IDENTITYPOOLID" --output text --query 'Parameter.Value')"
      - app_client_id="$(aws ssm get-parameter --name "AMORPHIC.COGNITO.USERPOOLCLIENTID" --output text --query 'Parameter.Value')"
      - api_gateway_id="$(aws ssm get-parameter --name "AMORPHIC.AI.API.APIGATEWAY" --output text --query 'Parameter.Value')"
      - parent_app_id="$(aws ssm get-parameter --name AMORPHIC.WEB.CLOUDFRONTDOMAINID --output text --query 'Parameter.Value')"
      - |
        if [ "$enable_fips" = "yes" ]; then
          api_url="https://$api_custom_domain_name/"
        else
          api_url="https://$api_gateway_id.execute-api.${deploy_region}.amazonaws.com/${deployment_environment}/"
        fi
      - amorphic_portal_url="$(aws ssm get-parameter --name "AMORPHIC.CONFIG.PORTALURL" --output text --query 'Parameter.Value')"
      - email_domains="$(aws ssm get-parameter --name "AMORPHIC.CONFIG.USEREMAILDOMAIN" --output text --query 'Parameter.Value')"
      - email_domains_list=[$(echo "$email_domains" | sed 's/[^,]*/"&"/g')]
      - chatwebsocket_id="$(aws ssm get-parameter --name "AMORPHIC.AI.API.CHATWSID" --output text --query 'Parameter.Value')"
      - chatwebsocket_url="wss://$chatwebsocket_id.execute-api.${deploy_region}.amazonaws.com/${deployment_environment}/"
      - chatbotwebsocket_id="$(aws ssm get-parameter --name "AMORPHIC.AI.API.CHATBOTWSID" --output text --query 'Parameter.Value')"
      - chatbotwebsocket_url="wss://$chatbotwebsocket_id.execute-api.${deploy_region}.amazonaws.com/${deployment_environment}/"
      - agentwebsocket_id="$(aws ssm get-parameter --name "AMORPHIC.AI.API.AGENTWSID" --output text --query 'Parameter.Value')"
      - amorphic_apigateway_url="$(aws ssm get-parameter --name "AMORPHIC.APIGATEWAY.APIURLWITHSTAGE" --output text --query 'Parameter.Value')"
      - agentwebsocket_url="wss://$agentwebsocket_id.execute-api.${deploy_region}.amazonaws.com/${deployment_environment}/"
      # Create the config.json file with generated values
      - touch config.json
      - |
        cat > config.json <<EOF
        {
          "PROJECT_NAME": "$project_name",
          "PROJECT_SHORT_NAME": "$project_short_name",
          "VERTICAL_NAME": "$vertical_name",
          "ENVIRONMENT": "$deployment_environment",
          "VERSION": "$version",
          "region": "$deploy_region",
          "userPool": "$cognito_user_pool_id",
          "identityPool": "$cognito_identity_pool_id",
          "parent_app_id": "$parent_app_id",
          "ENFORCE_COGNITO_MFA": "$enforce_mfa",
          "Domain":$email_domains_list,
          "clientId":"$app_client_id",
          "API_gateway":"$api_url",
          "AMORPHIC_APIGATEWAY_URL":"$amorphic_apigateway_url",
          "AMORPHIC_PORTAL_URL":"$amorphic_portal_url",
          "ChatWebSocket_URL":"$chatwebsocket_url",
          "ChatbotWebSocket_URL":"$chatbotwebsocket_url",
          "AgentWebSocket_URL":"$agentwebsocket_url"
        }
        EOF
        if [ "$enable_idp" = "yes" ] && [ "$app_web_domain" != "N/A" ] && [ "$token_scopes_array" != "N/A" ] && [ "$identity_provider" != "N/A" ]; then
        echo "IDP is enabled for Cognito, adding additional params to config.json file..."
        sed -i '$d' config.json
        cat << EOT >> config.json
          ,"APP_WEB_DOMAIN": "$app_web_domain",
          "TOKEN_SCOPES_ARRAY": $token_scopes_array,
          "IDENTITY_PROVIDER": "$identity_provider",
          "ENABLE_IDP": "$enable_idp"
        }
        EOT
        fi
      - echo "Generated UI config file:"
      - cat config.json
      - mkdir -p web-app/src/
      - cp config.json web-app/src/
      - cd web-app
      - echo command ls output is...
      - ls -latr
      - yarn
      - echo completed yarn install.
      - echo running yarn build...
      - yarn build
      - echo completed yarn build.
      - echo syncing the latest built packages to web bucket.
      - webstack_folder_tgt="s3://$web_bucket_name/"
      - index_file_tgt="s3://$web_bucket_name/index.html"
      - aws s3 sync public/ ${webstack_folder_tgt} --exclude index.html --quiet --cache-control max-age=86400
      - aws s3 cp public/index.html ${index_file_tgt} --metadata-directive REPLACE --cache-control max-age=0,no-cache,must-revalidate --content-type text/html
      - aws s3 cp src/config.json s3://$web_bucket_name/config.json
      - echo completed syncing built packages to web bucket.
      # Get the cloudfront Distribution ID
      - cloudfront_distribution_id=`aws ssm get-parameter --name "AMORPHIC.AI.INFRA.CLOUDFRONTDISTRIBUTIONID" --query 'Parameter.Value' --output text 2> /dev/null` || true
      - echo cloudfront distribution id is $cloudfront_distribution_id
      - echo invalidating the cloudfront distribution with new changes...
      # Create cloudfront invalidations needed
      - AWS_MAX_ATTEMPTS=10 aws cloudfront create-invalidation --distribution-id ${cloudfront_distribution_id} --paths "/*"
      - echo completed invalidating the cloudfront distribution.
      - echo UI build and deploy process is completed.
      # - echo Updating verticals table with metadata about AI, if necessary
      - amorphic_verticals_table=`aws ssm get-parameter --name "/${project_short_name}/${deployment_environment}/dynamoDB/verticalsTable" --query 'Parameter.Value' --output text 2> /dev/null` || true
      - acl_resources_table=`aws ssm get-parameter --name "/${project_short_name}/${deployment_environment}/dynamoDB/aclResourcesTable" --query 'Parameter.Value' --output text 2> /dev/null` || true
      - cloudfront_domain_name=`aws ssm get-parameter --name "AMORPHIC.AI.INFRA.CLOUDFRONTDOMAINNAME" --query 'Parameter.Value' --output text 2> /dev/null` || true
      - |
        if [ "$acm_domain_alias" = "no" ]; then
          ai_portal_url="${cloudfront_domain_name}"
        else
          ai_portal_url="https://${acm_domain_alias}"
        fi
      - cf_portal_url=$ai_portal_url
      - vertical_description="AI Chatbot Application"
      # Below python script is used to add metadata about the vertical to Amorphic DDB tables
      # Tables are Verticals table, AclResourceTable
      - |
        python -c "
        import os
        import sys
        import uuid
        from datetime import datetime
        import boto3
        from boto3.dynamodb.conditions import Key

        try:
            # Set your variables
            REGION=os.environ['AWS_REGION']
            ACCESS_KEY_ID=os.environ['AWS_ACCESS_KEY_ID']
            SECRET_KEY=os.environ['AWS_SECRET_ACCESS_KEY']
            SESSION_TOKEN=os.environ['AWS_SESSION_TOKEN']

            VERTICAL_NAME=os.environ['vertical_name']
            CF_PORTAL_URL=os.environ['cf_portal_url']
            VERTICAL_DESCRIPTION=os.environ['vertical_description']
            PROJECT_SHORT_NAME=os.environ['project_short_name']
            USER_ID=os.environ['user_id']

            boto3_session = boto3.Session(aws_access_key_id=ACCESS_KEY_ID, aws_secret_access_key=SECRET_KEY, aws_session_token=SESSION_TOKEN, region_name=REGION)
            DYNAMODB_RES = boto3_session.resource('dynamodb')

            VERTICALS_TABLE_NAME=os.environ['amorphic_verticals_table']
            ACL_RESOURCES_TABLE_NAME=os.environ['acl_resources_table']

            VERTICALS_TABLE = DYNAMODB_RES.Table(VERTICALS_TABLE_NAME)
            ACL_RESOURCES_TABLE = DYNAMODB_RES.Table(ACL_RESOURCES_TABLE_NAME)

        except Exception as exc:
            print('Failed to set environment variables with: {}'.format(exc))
            sys.exit()

        def main():
            print('Updating metadata in Amorphic DDB tables')
            # Scan the DynamoDB table
            response = VERTICALS_TABLE.scan(
                FilterExpression=boto3.dynamodb.conditions.Attr('VerticalType').eq(VERTICAL_NAME)
            )

            # Extract values from the response
            is_vertical_deployed = response['Count']
            if is_vertical_deployed > 0:
                portal_url = response['Items'][0]['Url']
                vertical_id = response['Items'][0]['VerticalId']
                created_by = response['Items'][0]['CreatedBy']
                creation_time = response['Items'][0]['CreationTime']
                current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                # Check if cloudfront url is changed and update the item if necessary
                if portal_url != CF_PORTAL_URL:
                    portal_url = CF_PORTAL_URL
            else:
                if not USER_ID:
                    print('user_id is a mandatory attribute for fresh deployment of the vertical')
                    sys.exit()
                portal_url = CF_PORTAL_URL
                vertical_id = str(uuid.uuid4())
                created_by = USER_ID
                creation_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            with VERTICALS_TABLE.batch_writer() as batch:
                batch.put_item(
                        Item={
                            'VerticalId': vertical_id,
                            'VerticalName': f'{PROJECT_SHORT_NAME}-{VERTICAL_NAME}',
                            'VerticalType': VERTICAL_NAME,
                            'CreationTime': creation_time,
                            'CreatedBy': created_by,
                            'Description': VERTICAL_DESCRIPTION,
                            'Url': portal_url,
                            'LastModifiedTime': current_time,
                            'LastModifiedBy': 'System'
                        }
                    )
            # Add entry to ACL Resources table if no user/tag has access on the vertical
            key_condition_expression = Key('ResourceId').eq(vertical_id) & Key('TagAccessKey').begins_with('verticals')
            access_control_response = ACL_RESOURCES_TABLE.query(
                KeyConditionExpression=key_condition_expression
            )
            acl_item_count = access_control_response['Count']
            if acl_item_count == 0:
                with ACL_RESOURCES_TABLE.batch_writer() as batch:
                    batch.put_item(
                        Item={
                            'ResourceId': vertical_id,
                            'TagAccessKey': f'verticals#user#{created_by}#owner',
                            'AdditionalMetadata': {},
                            'CreatedBy': 'System',
                            'CreatedTime': current_time,
                            'LastModifiedBy': 'System',
                            'LastModifiedTime': current_time,
                            'ResourceName': f'{PROJECT_SHORT_NAME}-{VERTICAL_NAME}',
                            'ResourceType': 'verticals'
                        }
                    )
            print('Successfully updated metadata in Amorphic DDB tables')
        if __name__=='__main__':
            main()
        "
      # - echo Updating enabled verticals list ssm parameter, if necessary
      - |
        enabled_verticals_list=`aws ssm get-parameter --name "AMORPHIC.CONFIG.ENABLEDVERTICALSLIST" --query 'Parameter.Value' --output text 2> /dev/null` || true
        if [ -z "$enabled_verticals_list" ]; then
          aws ssm put-parameter --name "AMORPHIC.CONFIG.ENABLEDVERTICALSLIST" --value "$vertical_name" --type String --overwrite
        elif [ `echo ${enabled_verticals_list} | grep -c ${vertical_name}` -ne 1 ]; then
          updated_verticals_list="$enabled_verticals_list,$vertical_name"
          aws ssm put-parameter --name "AMORPHIC.CONFIG.ENABLEDVERTICALSLIST" --value "$updated_verticals_list" --type String --overwrite
        fi
      # Add the verticals domain to the cognito logout and callback URL in cognito
      - echo Updating Cognito App client Logout and Callback URLs if needed
      - |
        if [ "$enable_idp" = "yes" ] && awk 'BEGIN{ exit !('"$version"' >= 2.4) }'; then
        python -c "

        import os
        import boto3

        REGION=os.environ['AWS_REGION']
        ACCESS_KEY_ID=os.environ['AWS_ACCESS_KEY_ID']
        SECRET_KEY=os.environ['AWS_SECRET_ACCESS_KEY']
        SESSION_TOKEN=os.environ['AWS_SESSION_TOKEN']
        ENVIRONMENT=os.environ['deployment_environment']
        USER_POOL_ID=os.environ['cognito_user_pool_id']
        APP_CLIENT_ID=os.environ['app_client_id']
        AI_PORTAL_URL=os.environ['ai_portal_url']

        boto3_session = boto3.Session(aws_access_key_id=ACCESS_KEY_ID, aws_secret_access_key=SECRET_KEY, aws_session_token=SESSION_TOKEN, region_name=REGION)
        cognito_client = boto3_session.client('cognito-idp')
        ssm_client = boto3_session.client('ssm')
        # Describe the user pool client to get its current configuration
        response = cognito_client.describe_user_pool_client( UserPoolId=USER_POOL_ID, ClientId=APP_CLIENT_ID )

        # Extract the existing configuration and remove unnecessary params
        existing_config = response['UserPoolClient']
        existing_config.pop('CreationDate')
        existing_config.pop('LastModifiedDate')

        # Update the callback and logout URLs if needed
        existing_config.setdefault('CallbackURLs',[])
        existing_config.setdefault('LogoutURLs',[])
        ai_callback_url = f'{AI_PORTAL_URL}/callback'
        ai_logout_url = f'{AI_PORTAL_URL}/auth/login'
        existing_callback_urls_response = ssm_client.get_parameter(Name='AMORPHIC.COGNITO.CALLBACKURLS', WithDecryption=True)
        existing_logout_urls_response = ssm_client.get_parameter(Name='AMORPHIC.COGNITO.LOGOUTURLS', WithDecryption=True)
        existing_callback_urls = existing_callback_urls_response['Parameter']['Value']
        existing_logout_urls = existing_logout_urls_response['Parameter']['Value']

        if ai_callback_url not in existing_callback_urls.split(','):
          ssm_client.put_parameter(Name='AMORPHIC.COGNITO.CALLBACKURLS', Value=f'{existing_callback_urls},{ai_callback_url}', Type='String', Overwrite=True)
          existing_config['CallbackURLs'] = existing_callback_urls.split(',') + [ai_callback_url]


        if ai_logout_url not in existing_logout_urls.split(','):
          ssm_client.put_parameter(Name='AMORPHIC.COGNITO.LOGOUTURLS', Value=f'{existing_logout_urls},{ai_logout_url}', Type='String', Overwrite=True)
          existing_config['LogoutURLs'] = existing_logout_urls.split(',') + [ai_logout_url]

        update_args = { key: existing_config[key] for key in existing_config.keys()}
        # Update the user pool client with the modified configuration
        cognito_client.update_user_pool_client(**update_args)
        "
        fi
      - echo AI build and deploy process is completed.
  post_build:
    commands:
      - echo Entering post build phase
      - echo Build phase status is $CODEBUILD_BUILD_SUCCEEDING
      # Update vertical deployment status in DynamoDB if the deployment was from CMP
      - |
        if [ "$deployment_source" = "CMP" ]; then
        # Remove the cross account access role from the session
        unset AWS_SESSION_TOKEN
        unset AWS_ACCESS_KEY_ID
        unset AWS_SECRET_ACCESS_KEY
        python -c "
        import os
        import boto3
        from datetime import datetime

        APPLICATION_ID = os.environ['application_id']
        APPLICATIONS_TABLE_NAME = os.environ['applications_table_name']
        VERTICAL_NAME = os.environ['vertical_name']
        DEPLOYMENT_STATUS = os.environ['CODEBUILD_BUILD_SUCCEEDING'] # Env variable provided by CodeBuild

        VERTICALS_STATUS_READY = 'ready'
        VERTICALS_STATUS_ERROR = 'error'

        DYNAMODB_RESOURCE = boto3.resource('dynamodb')
        APPLICATIONS_TABLE = DYNAMODB_RESOURCE.Table(APPLICATIONS_TABLE_NAME)

        def get_application_metadata():
            '''
            Get application metadata from DDB
            '''
            print(f'In get_application_metadata, getting details of app id {APPLICATION_ID}')
            application_item = APPLICATIONS_TABLE.get_item(
                Key = {
                    'ApplicationId': APPLICATION_ID
                }
            )
            print('In get_application_metadata, exiting method')
            return application_item['Item']

        def update_verticals_deployment_status(application_item):
            '''
            Update vertical deployment status in dynamo db
            '''
            print('In update_verticals_deployment_status, updating metadata')

            # If DEPLOYMENT_STATUS is 1 then build was successfull, 0 otherwise
            if DEPLOYMENT_STATUS == '1':
                application_item['VerticalsConfig'][VERTICAL_NAME].update({
                    'VerticalStatus': VERTICALS_STATUS_READY
                })
                application_item['Configurations'].setdefault('EnabledVerticalsList', []).append(VERTICAL_NAME)
                # Dedup the verticals list, incase of multiple deployments this will get added to existing list
                application_item['Configurations']['EnabledVerticalsList'] = list(set(application_item['Configurations']['EnabledVerticalsList']))
            else:
                application_item['VerticalsConfig'][VERTICAL_NAME].update({
                    'VerticalStatus': VERTICALS_STATUS_ERROR
                })

            update_expression = 'SET LastModifiedTime = :val1, VerticalsConfig = :val2, Configurations = :val3'
            expression_attributes = {
                ':val1': str(datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')),
                ':val2': application_item['VerticalsConfig'],
                ':val3': application_item['Configurations']
            }

            response = APPLICATIONS_TABLE.update_item(
                Key=  {
                    'ApplicationId': APPLICATION_ID
                },
                UpdateExpression = update_expression,
                ExpressionAttributeValues = expression_attributes
            )
            print('In update_verticals_deployment_status, exiting method')

        def main():
            '''
            Main Method
            '''
            # Get the application metadata
            application_item = get_application_metadata()
            update_verticals_deployment_status(application_item)

        if __name__ == '__main__':
            main()
        "
        fi
