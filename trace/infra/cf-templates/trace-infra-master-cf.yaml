AWSTemplateFormatVersion: 2010-09-09

Description: Amorphic Trace - Infrastructure Master CF stack.

Parameters:
  pSSMEnvironment:
    Description: Environment
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.CONFIG.ENVIRONMENT
  pSSMProjectName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.CONFIG.PROJECTNAME
  pSSMProjectShortName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.CONFIG.PROJECTSHORTNAME
  pSSMEnableWAF:
    Description: Flag to deploy the WAF resources or not
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.CONFIG.ENABLEWAF
  pSSMWAFwebACL:
    Description: Globabl Wep Application Firewall
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.WEB.WAFWEBACL
  pSSMWebACLARN:
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.WEB.WAFREGIONALWEBACL
  pSSMVPC:
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.VPC.VPCID
  pSSMPublicSubnet2:
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.VPC.PUBLICSUBNET2ID
  pSSMPublicSubnet3:
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.VPC.PUBLICSUBNET3ID
  pSSMVerticalsPrivateSubnet1ID:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Verticals Private subnet 1 ID
    Default: AMORPHIC.VPC.VERTICALSPRIVATESUBNET1ID
  pSSMVerticalsPrivateSubnet2ID:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Verticals Private subnet 1 ID
    Default: AMORPHIC.VPC.VERTICALSPRIVATESUBNET2ID
  pSSMTraceInstanceType:
    Description: EC2 instance type for Squid.
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.TRACE.CONFIG.TRACEINSTANCETYPE
  pSSMKMSKeysList:
    Type: AWS::SSM::Parameter::Value<List<String>>
    Description: Customer managed KMS keys list
    Default: AMORPHIC.COREBUCKET.KMSKEYSLIST
  pSSMUserPoolId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.COGNITO.USERPOOLID
  pSSMArtifactsPrefixPlaceholder:
    Type: String
  pSSMS3BucketsName:
    Description: Contains list of names of s3 buckets
    Type: AWS::SSM::Parameter::Value<List<String>>
    Default: AMORPHIC.CONFIG.BUCKETLIST
  pSSMALBCertificateArn:
    Description: Certificate ARN for Trace ALB
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.TRACE.CONFIG.ALBACMCERTIFICATEARN
  pSSMAPICustomDomainName:
    Description: Domain alias for Trace API Cloudfront
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.TRACE.CONFIG.APICUSTOMDOMAINNAME
  pSSMUICustomDomainName:
    Description: Domain alias for Trace UI Cloudfront
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.TRACE.CONFIG.UICUSTOMDOMAINNAME
  pSSMACMCertificateARN:
    Description: ACM certificate used if we are using custom domain for cloudfront
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.TRACE.CONFIG.ACMCERTIFICATEARN
  pSSMVerticalName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.TRACE.CONFIG.VERTICALNAME
  pSSMEnableBucketVersioning:
    Description: Enable Bucket Versioning on all s3 buckets
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.CONFIG.ENABLEBUCKETVERSIONING
  pSSMOSSecurityGroup:
    Description: OpenSearch Security Group ID
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.OPENSEARCH.SECURITYGROUP
  pSSMTraceALBCustomDomain:
    Description: Custom domain of Trace ALB
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.TRACE.CONFIG.ALBCUSTOMDOMAINALIAS
  pSSMEnableFips:
    Type: AWS::SSM::Parameter::Value<String>
    Description: FIPS Service Endpoints Enabled
    Default: AMORPHIC.CONFIG.ENABLEFIPS 
  pSSMAmorphicAPIGW:
    Type: AWS::SSM::Parameter::Value<String>
    Default: AMORPHIC.APIGATEWAY.APIURLWITHSTAGE
    Description: Amorphic API Gateway

Conditions:
  cManagedCertificate: !And
  - !Not
    - !Equals [!Ref pSSMACMCertificateARN, "N/A"]
  - !Not
    - !Equals [!Ref pSSMUICustomDomainName, "N/A"]
  cEnableWAF: !Equals
    - !Ref pSSMEnableWAF
    - "yes"
  cEnableCloudfrontLogging: !Not
    - !Equals [!Ref 'AWS::Region', "me-south-1"]
  cIsBucketVersioningEnabled: !Equals
    - !Ref pSSMEnableBucketVersioning
    - "yes"
  cAPICustomDomainAvailable: !Not
    - !Equals [!Ref pSSMAPICustomDomainName, "N/A"]
  cUICustomDomainAvailable: !Not
    - !Equals [!Ref pSSMUICustomDomainName, "N/A"]
  # Customers may have a requirement to use their own WAF rather than AWS WAF to maintain and manage easily.
  # In that case, Trace should be accessible via Custom Domain Alias and not via CloudFront provided domain.
  cEnableCloudfrontFunction: !And
    - !Not
      - !Condition cEnableWAF
    - !Not
      - !Equals [ !Ref pSSMUICustomDomainName, "N/A" ]
  cIsFIPSEnabled: !Equals
    - !Ref pSSMEnableFips
    - "yes"

Mappings:
  GrafanaAMIMap: # Amazon Linux 2 /aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2 Publish date: 2024-05-02
  # We are using AL2 as the squid proxy is also using AL2
  # We noticed that when we were using AL2023 for Grafana, it failed to validate the SSL
  # certificates in responses due to the version mismatch of OpenSSL lib. AL2023 won't 
  # recognize the certificates signed by the lower version OpenSSL present in AL2
    us-east-1:
      AmiId: 'ami-0a1179631ec8933d7'
    us-east-2:
      AmiId: 'ami-080e449218d4434fa'
    us-west-2:
      AmiId: 'ami-086f060214da77a16'
    eu-west-1:
      AmiId: 'ami-07edc58546d708802'
    eu-west-2:
      AmiId: 'ami-09cce85cf54d36b29'
    ap-southeast-2:
      AmiId: 'ami-0a4f913c1801e18a2'
    eu-central-1:
      AmiId: 'ami-0a946522147cbcbcc'
    ca-central-1:
      AmiId: 'ami-0db8414c676722acd'
    me-south-1:
      AmiId: 'ami-0e807f7000c2c922e'

Resources:
  rWebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["-",[!Ref pSSMProjectShortName, !Ref pSSMVerticalName, !Ref "AWS::Region",!Ref "AWS::AccountId",!Ref pSSMEnvironment,"web"]]
      VersioningConfiguration:
        Fn::If: [ cIsBucketVersioningEnabled, Status: Enabled, Ref: AWS::NoValue ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !Select [ 0, !Ref pSSMKMSKeysList ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE
      LoggingConfiguration:
        DestinationBucketName: !Select [6, !Ref pSSMS3BucketsName]
        LogFilePrefix: !Join [ "/", [ !Join [ "-", [ !Ref pSSMProjectShortName, !Ref pSSMVerticalName, !Ref "AWS::Region", !Ref "AWS::AccountId", !Ref pSSMEnvironment, "s3logs" ] ], "bucketname=web", "" ] ]
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref pSSMProjectName, !Ref pSSMVerticalName, !Ref pSSMEnvironment, "S3", "WebResourcesBucket" ] ]
      - Key: Environment
        Value: !Ref pSSMEnvironment
      - Key: Region
        Value: !Ref "AWS::Region"
  
  rWebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rWebBucket
      PolicyDocument:
        Statement:
        - Action: s3:GetObject
          Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Resource: !Sub "arn:${AWS::Partition}:s3:::${rWebBucket}/*"
          Condition:
            StringEquals:
              AWS:SourceArn: !Sub arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${rCloudFront}
        - Sid: AllowSSLRequestsOnly
          Effect: Deny
          Principal:
            AWS: "*"
          Action: s3:*
          Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${rWebBucket}"
          - !Sub "arn:${AWS::Partition}:s3:::${rWebBucket}/*"
          Condition:
            Bool:
              aws:SecureTransport: false

  rCloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: Cloudfront Cache Policy for origin request
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: !Join ["-", [!Ref pSSMProjectName, !Ref pSSMVerticalName, !Ref pSSMEnvironment, "Cache", "Policy"]]
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior:
              all

  rCloudFrontResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Join ["-", [!Ref pSSMProjectName, !Ref pSSMVerticalName, !Ref pSSMEnvironment, "Security", "Headers", "Policy"]]
        Comment: Cloudfront Advanced Security Headers Policy for Origin Response
        CustomHeadersConfig:
            Items:
              - Header: Feature-policy
                Override: true
                Value: sync-xhr 'self' https://*.amazonaws.com https://*.amazon.com; payment 'none';
              - Header: Permissions-Policy
                Override: true
                Value: microphone=(), payment=(), sync-xhr=(self "https://*.amazonaws.com" "https://*.amazon.com")
        SecurityHeadersConfig:
            ContentSecurityPolicy:
              ContentSecurityPolicy: !Sub
                - >-
                  upgrade-insecure-requests; default-src 'none'; child-src 'self'; font-src 'self' https://fonts.gstatic.com https://maxcdn.bootstrapcdn.com;
                  img-src 'self' data: https://*.amazonaws.com; media-src 'self' https://*.amazonaws.com; worker-src 'self' blob:; script-src 'self' 'unsafe-inline';
                  style-src 'self' 'unsafe-inline' https://fonts.googleapis.com/ https://maxcdn.bootstrapcdn.com/; manifest-src 'self';
                  connect-src 'self' https://*.amazonaws.com https://*.amazon.com https://*.amazoncognito.com wss://*.amazonaws.com ${APICUSTOMDOMAINNAME} ${AMORPHICAPIGW} blob:; form-action 'self' https://*.amazonaws.com http://*.amazonaws.com ${APICUSTOMDOMAINNAME};
                  frame-ancestors https:; base-uri 'self' https://*.amazonaws.com; frame-src 'self' 'unsafe-inline' https://*.amazonaws.com https://*.amazon.com http://*.amazonaws.com https://${pSSMTraceALBCustomDomain};
                - { 
                    APICUSTOMDOMAINNAME: !If [ cAPICustomDomainAvailable, !Sub "https://${pSSMAPICustomDomainName}", "" ],
                    AMORPHICAPIGW: !If [ cIsFIPSEnabled, !Sub "${pSSMAmorphicAPIGW}", "" ]
                  }
              Override: true
            ContentTypeOptions:
              Override: true
            ReferrerPolicy:
              ReferrerPolicy: same-origin
              Override: true
            StrictTransportSecurity:
              AccessControlMaxAgeSec: 31536000
              IncludeSubdomains: true
              Preload: true
              Override: true
            XSSProtection:
              ModeBlock: true
              Protection: true
              Override: true
        RemoveHeadersConfig:
          Items:
            - Header: x-amz-server-side-encryption-aws-kms-key-id # Removing header to hide the kms key id in the response to enhance security

  rRestrictCloudFrontUrlAccessFunction:
    Type: AWS::CloudFront::Function
    Condition: cEnableCloudfrontFunction
    Properties:
      Name: !Join [ "-", [ !Ref pSSMProjectShortName, !Ref pSSMEnvironment, !Ref pSSMVerticalName, "RestrictsCloudfrontUrlAccess" ] ]
      FunctionConfig:
        Comment: Access to Trace is redirected through Custom Domain Alias
        Runtime: cloudfront-js-2.0
      FunctionCode: 
        !Sub |
          function handler(event) {
            var request = event.request;
            var headers = request.headers;

            var hostHeader = headers.host.value;
            
            // Check if the host header ends with 'cloudfront.net'
            if (hostHeader.endsWith('cloudfront.net')) {
              return {
                statusCode: 301,
                statusDescription: 'Moved Permanently',
                headers: {
                  'location': { value: "https://${pSSMUICustomDomainName}" },
                  'cache-control': { value: 'no-cache' }
                }
              };
            }
            return request;
          }
      AutoPublish: true               

  rCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt rWebBucket.RegionalDomainName
          Id: !Sub "${pSSMProjectShortName}${pSSMVerticalName}S3Origin"
          OriginAccessControlId: !GetAtt rCloudFrontOriginAccessControl.Id
          S3OriginConfig:
            OriginAccessIdentity: ''
        Enabled: 'true'
        Comment: 'Trace Web application'
        DefaultRootObject: index.html
        Aliases:
        - !If [ cUICustomDomainAvailable, !Ref pSSMUICustomDomainName, !Ref 'AWS::NoValue' ]
        DefaultCacheBehavior:
          AllowedMethods:
          - HEAD
          - DELETE
          - POST
          - GET
          - OPTIONS
          - PUT
          - PATCH
          Compress: true
          TargetOriginId: !Sub "${pSSMProjectShortName}${pSSMVerticalName}S3Origin"
          ViewerProtocolPolicy: redirect-to-https
          ResponseHeadersPolicyId: !Ref rCloudFrontResponseHeadersPolicy
          CachePolicyId: !Ref rCloudFrontCachePolicy
          FunctionAssociations:
            - !If 
              - cEnableCloudfrontFunction
              - EventType: viewer-request
                FunctionARN: !GetAtt rRestrictCloudFrontUrlAccessFunction.FunctionARN
              - !Ref 'AWS::NoValue'
        CustomErrorResponses:
        - ErrorCode: '403'
          ResponsePagePath: "/index.html"
          ResponseCode: '200'
          ErrorCachingMinTTL: '300'
        - ErrorCode: '404'
          ResponsePagePath: "/index.html"
          ResponseCode: '200'
          ErrorCachingMinTTL: '300'
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !If [ cManagedCertificate, !Ref pSSMACMCertificateARN, !Ref 'AWS::NoValue' ]
          CloudFrontDefaultCertificate: !If [ cManagedCertificate, !Ref 'AWS::NoValue', true  ]
          SslSupportMethod: !If [ cManagedCertificate, 'sni-only', !Ref 'AWS::NoValue' ]
          MinimumProtocolVersion: 'TLSv1.2_2021'
        WebACLId: !If [ cEnableWAF, !Ref pSSMWAFwebACL, !Ref 'AWS::NoValue' ]
        Logging:
          !If
            - cEnableCloudfrontLogging
            -
              Bucket: !Sub [ "${LOGS_BUCKET}.s3.amazonaws.com", {LOGS_BUCKET: !Select [6, !Ref pSSMS3BucketsName] } ]
              IncludeCookies: false
              Prefix: "cloudfront/"
            - !Ref 'AWS::NoValue'
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref pSSMProjectName, !Ref pSSMVerticalName, !Ref pSSMEnvironment, "Cloudfront" ] ]
      - Key: Environment
        Value: !Ref pSSMEnvironment
      - Key: Region
        Value: !Ref 'AWS::Region'

  rCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: Origin Access Control for Web bucket
        Name: 'TRACE Web Application OAC'
        OriginAccessControlOriginType: s3
        SigningBehavior: no-override
        SigningProtocol: sigv4

  rGrafanaSecretKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "KMS key for Grafana Admin Secret"
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Id: "grafana-secret-key-policy"
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS:
                !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: "Enable Secret Access Permissions"
            Effect: "Allow"
            Principal:
              Service: "secretsmanager.amazonaws.com"
            Action:
              - "kms:Decrypt"
              - "kms:Encrypt"
              - "kms:GenerateDataKey*"
              - "kms:CreateGrant"
              - "kms:ListGrants"
              - "kms:DescribeKey"
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount:
                  Ref: "AWS::AccountId"
      KeyUsage: ENCRYPT_DECRYPT
      PendingWindowInDays: 7
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref pSSMProjectName, !Ref pSSMEnvironment, "GrafanaAdminSecretKMSKey" ] ]
      - Key: Environment
        Value: !Ref pSSMEnvironment
      - Key: Region
        Value: !Ref 'AWS::Region'
  
  rGrafanaSecretKMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${pSSMProjectShortName}/grafana-admin-secret"
      TargetKeyId: !Ref rGrafanaSecretKMSKey
  
  rGrafanaAdminUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${pSSMProjectShortName}-${pSSMEnvironment}-grafana_admin_secret"
      Description: "This secret has a dynamically generated master user password for Grafana/TRACE."
      KmsKeyId: !Ref rGrafanaSecretKMSKey
      GenerateSecretString:
        SecretStringTemplate: '{"username":"admin"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: "\"@/\\'"
        IncludeSpace: false
      Tags:
        - Key: "Name"
          Value: !Sub "${pSSMProjectShortName}-${pSSMEnvironment}-GrafanaAdminSecret"
        - Key: "Environment"
          Value: !Ref pSSMEnvironment
        - Key: "Region"
          Value: !Ref 'AWS::Region'

  rGrafanaEC2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchReadOnlyAccess"
      Policies:
        - PolicyName: "EC2AndEFSPolicies"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:AssignIpv6Addresses"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DescribeNetworkInterfaceAttribute"
                  - "ec2:ModifyInstanceAttribute"
                  - "ec2:DescribeRegions"
                  - "autoscaling:CompleteLifecycleAction"
                  - "autoscaling:DescribeAutoScalingInstances"
                Resource: '*'
              - Effect: "Allow"
                Action:
                  - "elasticfilesystem:ClientMount"
                  - "elasticfilesystem:ClientWrite"
                  - "elasticfilesystem:ClientRootAccess"
                Resource: !Sub 'arn:${AWS::Partition}:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${pSSMProjectShortName}-${pSSMEnvironment}-Grafana-EFS'
        - PolicyName: "DashboardDataPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:Get*
                  - s3:List*
                Resource:
                  - !Sub [ "arn:${AWS::Partition}:s3:::${CoreBucketName}", {CoreBucketName : !Select [14, !Ref pSSMS3BucketsName]} ]
                  - !Sub [ "arn:${AWS::Partition}:s3:::${CoreBucketName}/*", {CoreBucketName : !Select [14, !Ref pSSMS3BucketsName]} ]
                  - !Sub [ "arn:${AWS::Partition}:s3:::${LogsBucketName}", {LogsBucketName : !Select [6, !Ref pSSMS3BucketsName]} ]
                  - !Sub [ "arn:${AWS::Partition}:s3:::${LogsBucketName}/*", {LogsBucketName : !Select [6, !Ref pSSMS3BucketsName]} ]
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:UpdateSecret"
                Resource: !Ref rGrafanaAdminUserSecret
              - Effect: Allow
                Action: 
                  - "kms:Encrypt"
                  - "kms:Decrypt"
                  - "kms:GenerateData*"
                Resource: 
                  - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${rGrafanaSecretKMSKey}"
                  - !Sub [ "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${EFSKMSKey}", {EFSKMSKey: !Select [ 17, !Ref pSSMKMSKeysList ]} ]
                  - !Sub [ "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KeyId}", { KeyId: !Select [ 0, !Ref pSSMKMSKeysList ] } ]
                  - !Sub [ "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KeyId}", { KeyId: !Select [ 10, !Ref pSSMKMSKeysList ] } ]
                  - !Sub [ "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KeyId}", { KeyId: !Select [ 12, !Ref pSSMKMSKeysList ] } ]
              - Effect: Allow
                Action: 
                  - "athena:GetDatabase"
                  - "athena:GetDataCatalog"
                  - "athena:GetTableMetadata"
                  - "athena:ListDatabases"
                  - "athena:ListDataCatalogs"
                  - "athena:ListTableMetadata"
                  - "athena:ListWorkGroups"
                  - "athena:GetQueryExecution"
                  - "athena:GetQueryResults"
                  - "athena:GetWorkGroup"
                  - "athena:StartQueryExecution"
                  - "athena:StopQueryExecution"
                  - "glue:GetDatabase"
                  - "glue:GetDatabases"
                  - "glue:GetTable"
                  - "glue:GetTables"
                  - "glue:GetPartition"
                  - "glue:GetPartitions"
                  - "glue:BatchGetPartition"
                  - "es:ESHttpGet"
                  - "es:ESHttpHead"
                  - "es:ESHttpPost"
                Resource: "*"
              - Effect: Allow
                Action: 
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:ListMultipartUploadParts"
                  - "s3:AbortMultipartUpload"
                  - "s3:PutObject"
                  - "s3:PutBucketPublicAccessBlock"
                Resource: 
                  - !Sub [ "arn:${AWS::Partition}:s3:::${AthenaBucket}", { AthenaBucket: !Select [ 1, !Ref pSSMS3BucketsName ] } ]
                  - !Sub [ "arn:${AWS::Partition}:s3:::${AthenaBucket}/*", { AthenaBucket: !Select [ 1, !Ref pSSMS3BucketsName ] } ]
        - PolicyName: "CloudwatchLogsWritePolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource:
                - !Sub arn:${AWS::Partition}:logs:*:*:log-group:*
                - !Sub arn:${AWS::Partition}:logs:*:*:log-group:*:*:*
              -
                Effect: Allow
                Action:
                - logs:TagResource
                - cloudwatch:PutMetricData
                Resource: "*"

  rGrafanaEC2IamProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref rGrafanaEC2InstanceRole
  
  rGrafanaALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${pSSMProjectShortName}-${pSSMEnvironment}-Grafana-ALB-SG"
      VpcId: !Ref pSSMVPC
      GroupDescription: 'Security group for Grafana ALB'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
        Description: "Allowing https traffic from internet"
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
        Description: "Allowing http traffic from internet. This traffic will be redirected to HTTPS listner"
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        DestinationSecurityGroupId: !GetAtt rGrafanaInstanceSecurityGroup.GroupId
        Description: "Allowing port 3000 access to grafana server"
      Tags:
      - Key: Name
        Value: !Sub "${pSSMProjectName}-${pSSMEnvironment}-Grafana-ALB-SecurityGroup"
      - Key: Environment
        Value: !Ref pSSMEnvironment
      - Key: Region
        Value: !Ref 'AWS::Region'
  
  rGrafanaInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${pSSMProjectShortName}-${pSSMEnvironment}-Grafana-Instance-SG"
      VpcId: !Ref pSSMVPC
      GroupDescription: 'Security group for Grafana instances'
      SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0
        Description: "Allowing all traffic to internet from grafana server"
      Tags:
      - Key: Name
        Value: !Sub "${pSSMProjectName}-${pSSMEnvironment}-Grafana-Instance-SecurityGroup"
      - Key: Environment
        Value: !Ref pSSMEnvironment
      - Key: Region
        Value: !Ref 'AWS::Region'
  
  rGrafanaInstanceSecurityGroupIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allowing ingress trafic on port 3000 from ALB SG"
      FromPort: 3000
      GroupId: !Ref rGrafanaInstanceSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref rGrafanaALBSecurityGroup
      ToPort: 3000

  rOpenSearchSecurityGroupIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allowing ingress trafic from Grafana Instance to OpenSearch"
      FromPort: 443
      GroupId: !Ref pSSMOSSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref rGrafanaInstanceSecurityGroup
      ToPort: 443

  rGrafanaEFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${pSSMProjectShortName}-${pSSMEnvironment}-Grafana-EFS-SG"
      VpcId: !Ref pSSMVPC
      GroupDescription: 'Security group for Grafana EFS'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        SourceSecurityGroupId: !GetAtt rGrafanaInstanceSecurityGroup.GroupId
        Description: "Allowing NFS port 2049 access from grafana server"
      Tags:
      - Key: Name
        Value: !Sub "${pSSMProjectName}-${pSSMEnvironment}-Grafana-EFS-SecurityGroup"
      - Key: Environment
        Value: !Ref pSSMEnvironment
      - Key: Region
        Value: !Ref 'AWS::Region'

  rGrafanaEFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      KmsKeyId: !Select [ 17, !Ref pSSMKMSKeysList ]
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags: 
        - Key: Name
          Value: !Join [ "-", [ !Ref pSSMProjectName, !Ref pSSMEnvironment, "Grafana-EFS" ] ]
        - Key: Environment
          Value: !Ref pSSMEnvironment
        - Key: Region
          Value: !Ref AWS::Region
          # Enable EFS backup with the existing Backup plans
        - Key: BackupEnabled
          Value: "yes"
  
  rGrafanaEFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref rGrafanaEFSFileSystem
      SubnetId: !Ref pSSMVerticalsPrivateSubnet1ID
      SecurityGroups:
        - !Ref rGrafanaEFSSecurityGroup

  rGrafanaEFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref rGrafanaEFSFileSystem
      SubnetId: !Ref pSSMVerticalsPrivateSubnet2ID
      SecurityGroups:
        - !Ref rGrafanaEFSSecurityGroup

  rGrafanaLaunchTemp:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Join [ '-', [ !Ref pSSMProjectShortName, !Ref 'AWS::Region', !Ref pSSMEnvironment, 'grafana-ec2-launchTemplate' ] ]
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
          - Key: Name
            Value: !Join [ "-", [ !Ref pSSMProjectName, !Ref pSSMEnvironment, "GrafanaEC2-LaunchTemplate" ] ]
          - Key: Environment
            Value: !Ref pSSMEnvironment
          - Key: Region
            Value: !Ref 'AWS::Region'
      LaunchTemplateData:
        ImageId:
          !FindInMap [ GrafanaAMIMap, !Ref 'AWS::Region', AmiId ]
        InstanceType:
          !Ref pSSMTraceInstanceType
        IamInstanceProfile:
          Name: !Ref rGrafanaEC2IamProfile
        SecurityGroupIds:
          - !GetAtt rGrafanaInstanceSecurityGroup.GroupId
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              VolumeSize: 30
              Encrypted: 'true'
              KmsKeyId: !Select [ 3, !Ref pSSMKMSKeysList ]
              VolumeType: gp3
        TagSpecifications:
          - ResourceType: volume
            Tags:
            - Key: Name
              Value: !Join [ "-", [ !Ref pSSMProjectName, !Ref pSSMEnvironment, "GrafanaEBSVolume" ] ]
            - Key: Environment
              Value: !Ref pSSMEnvironment
            - Key: Region
              Value: !Ref 'AWS::Region'
            - Key: BackupEnabled
              Value: "yes"
        MetadataOptions:
          HttpTokens: required
        UserData:
          Fn::Base64:
            !Sub
              - |-
                #!/bin/bash -xev
                sudo su;
                # Set the env varibales. These varibales are used inside other bash and python scripts
                export GRAFANA_DATA_PATH="/data"
                export COGNITO_JWKS_URL=${COGNITO_JWKS_URL}
                export COGNITO_TOKEN_ISS=${COGNITO_TOKEN_ISS}
                export AWS_REGION=${AWS_REGION}
                export GRAFANA_ADMIN_SECRET=${GRAFANA_ADMIN_SECRET}
                export PROJECT_SHORT_NAME=${PROJECT_SHORT_NAME}
                export PROJECT_NAME=${PROJECT_NAME}
                export ENVIRONMENT=${ENVIRONMENT}

                # Install required packages and python libraries
                yum install -y python3-pip jq amazon-efs-utils
                pip3 install urllib3==1.26.6
                pip3 install requests==2.31.0
                pip3 install boto3==1.33.13

                # Download all corebucket files from S3
                aws s3 cp --recursive s3://${CORE_BUCKET}/${GRAFANA_COREBUCKET_FILES} ./ --region ${AWS_REGION}

                # Install and configure the cloudwatch agent
                wget -q https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
                rpm -U ./amazon-cloudwatch-agent.rpm
                rm -f ./amazon-cloudwatch-agent.rpm
                cat grafana-unified-cloudwatch-agent.json > /etc/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.json
                systemctl start amazon-cloudwatch-agent
                systemctl enable amazon-cloudwatch-agent

                # Get the instance ID
                TOKEN=$(curl --request PUT "http://169.254.169.254/latest/api/token" --header "X-aws-ec2-metadata-token-ttl-seconds: 3600");
                INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id --header "X-aws-ec2-metadata-token: $TOKEN");

                # Create a mount point and mount the EFS using fstab
                mkdir -p $GRAFANA_DATA_PATH
                echo "${EFS_FS_ID}:/ $GRAFANA_DATA_PATH efs _netdev,noresvport,tls,iam 0 0" >> /etc/fstab
                mount -a
                echo "EFS ${EFS_FS_ID} mounted on $GRAFANA_DATA_PATH, entry made on fstab"

                chmod +x install_grafana.sh
                ./install_grafana.sh

                ASG_NAME=$(aws autoscaling describe-auto-scaling-instances --instance-ids $INSTANCE_ID --query "AutoScalingInstances[0].AutoScalingGroupName" --region $AWS_REGION --output text)

                # Complete the lifecycle hook to put the instance in service
                aws autoscaling complete-lifecycle-action \
                --lifecycle-action-result CONTINUE \
                --lifecycle-hook-name ${GRAFANA_LC_HOOK} \
                --auto-scaling-group-name $ASG_NAME \
                --instance-id $INSTANCE_ID \
                --region ${AWS_REGION}

                python3 configureAdminCredentials.py

                # Disable tracing to hide the secrets
                set +x

                GRAFANA_ADMIN_SECRET=$(aws secretsmanager get-secret-value --secret-id $GRAFANA_ADMIN_SECRET --query SecretString --region $AWS_REGION --output text)
                GRAFANA_SERVICE_TOKEN=$(echo $GRAFANA_ADMIN_SECRET | jq -r '.ServiceToken')
                export GRAFANA_SERVICE_TOKEN=$GRAFANA_SERVICE_TOKEN

                # Enable tracing back
                set -x

                python3 createGrafanaComponents.py

                # Set the value of megaMenuDocked to false in the compiled js file
                # so that when user loads the dashboard, the menu will be undocked initially.
                cd /usr/share/grafana/public/build
                js_file_name=$(grep -rl "this.megaMenuDocked" *.js)
                find . -type f -name "$js_file_name" | xargs sed -i 's/this.megaMenuDocked=\(!!\(.*\)xxl)),\)/this.megaMenuDocked=false,/g'

              - { EFS_FS_ID: !Ref rGrafanaEFSFileSystem,
                  COGNITO_JWKS_URL: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${pSSMUserPoolId}/.well-known/jwks.json",
                  COGNITO_TOKEN_ISS: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${pSSMUserPoolId}",
                  AWS_REGION: !Ref AWS::Region,
                  GRAFANA_COREBUCKET_FILES: !Sub "${pSSMArtifactsPrefixPlaceholder}/verticals/trace/trace-bootstrap-files",
                  CORE_BUCKET: !Select [ 14, !Ref pSSMS3BucketsName ],
                  GRAFANA_LC_HOOK: !Sub "${pSSMProjectName}-${pSSMEnvironment}-GrafanaInstanceLaunchHook",
                  GRAFANA_ADMIN_SECRET: !Ref rGrafanaAdminUserSecret,
                  PROJECT_SHORT_NAME: !Ref pSSMProjectShortName,
                  PROJECT_NAME: !Ref pSSMProjectName,
                  ENVIRONMENT: !Ref pSSMEnvironment
                }
  
  rGrafanaAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    Properties:
      VPCZoneIdentifier:
        - !Ref pSSMVerticalsPrivateSubnet1ID
        - !Ref pSSMVerticalsPrivateSubnet2ID
      Cooldown: 10
      LaunchTemplate:
        LaunchTemplateId: !Ref rGrafanaLaunchTemp
        Version: !GetAtt rGrafanaLaunchTemp.LatestVersionNumber
      MaxSize: '1'
      MinSize: '1'
      TargetGroupARNs:
        - !Ref rGrafanaALBTargetGroup
      LifecycleHookSpecificationList: 
        - LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
          DefaultResult: ABANDON
          HeartbeatTimeout: 600
          LifecycleHookName: !Sub "${pSSMProjectName}-${pSSMEnvironment}-GrafanaInstanceLaunchHook"
      Tags:
      - Key: Name
        Value: !Sub "${pSSMProjectName}-${pSSMEnvironment}-Grafana-AutoScalingGroup"
        PropagateAtLaunch: 'true'
      - Key: Environment
        Value: !Ref pSSMEnvironment
        PropagateAtLaunch: 'true'
      - Key: Region
        Value: !Ref 'AWS::Region'
        PropagateAtLaunch: 'true'

  rGrafanaALBTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 60
        HealthCheckPort: 3000
        HealthCheckProtocol: 'HTTP'
        HealthCheckPath: /api/health
        HealthCheckTimeoutSeconds: 10
        HealthyThresholdCount: 3
        UnhealthyThresholdCount: 3
        Port: 3000
        Protocol: HTTP
        TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '100'
        VpcId:
          !Ref pSSMVPC
        TargetType: instance
        Tags:
        - Key: Name
          Value: !Sub "${pSSMProjectName}-${pSSMEnvironment}-Grafana-ALB-TargetGroup"
        - Key: Environment
          Value: !Ref pSSMEnvironment
        - Key: Region
          Value: !Ref 'AWS::Region'

  rGrafanaApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Type: application
        Name: !Sub "${pSSMProjectShortName}-${pSSMEnvironment}-Grafana-ALB"
        Scheme: internet-facing
        SecurityGroups:
          - !Ref rGrafanaALBSecurityGroup
        LoadBalancerAttributes:
          - Key: access_logs.s3.enabled
            Value: true
          - Key: access_logs.s3.bucket
            Value: !Select [6, !Ref pSSMS3BucketsName]
          - Key: access_logs.s3.prefix
            Value: grafana-alb-logs
        Subnets:
        - !Ref pSSMPublicSubnet2
        - !Ref pSSMPublicSubnet3
        IpAddressType: 'ipv4'
        Tags:
        - Key: Name
          Value: !Sub "${pSSMProjectShortName}-${pSSMEnvironment}-Grafana-ALB"
        - Key: Environment
          Value: !Ref pSSMEnvironment
        - Key: Region
          Value: !Ref 'AWS::Region'

  rGrafanaALBHTTPSListner:
      Type : AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref rGrafanaALBTargetGroup
        LoadBalancerArn: !Ref rGrafanaApplicationLoadBalancer
        Port: 443
        Protocol: HTTPS
        Certificates:
          - CertificateArn: !Ref pSSMALBCertificateArn

  rGrafanaALBHTTPListner:
      Type : AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: 443
              Host: "#{host}"
              Path: "/#{path}"
              Query: "#{query}"
              StatusCode: HTTP_301
        LoadBalancerArn: !Ref rGrafanaApplicationLoadBalancer
        Port: 80
        Protocol: HTTP

  # Not associating the WAF with the Grafana ALB as WAF
  # is blocking Grafana API requests which contain valid SQL statements
  # rGrafanaALBWebACLAssociation:
  #   Type: AWS::WAFv2::WebACLAssociation
  #   Condition: cEnableWAF
  #   Properties:
  #     ResourceArn: !Ref rGrafanaApplicationLoadBalancer
  #     WebACLArn: !Ref pSSMWebACLARN

  rSSMCloudFrontDomainName:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "SSM Parameter for URL for website hosted on S3 via Cloudfront"
      Name: !Join [ ".", [ "AMORPHIC", "TRACE", "INFRA", "CLOUDFRONTDOMAINNAME" ] ]
      Type: String
      Value: !Sub "https://${rCloudFront.DomainName}"
      Tags:
        Name: !Sub "${pSSMProjectName}-${pSSMVerticalName}-${pSSMEnvironment}-AMORPHIC.TRACE.INFRA.CLOUDFRONTDOMAINNAME"
        Environment: !Ref pSSMEnvironment
        Region: !Ref "AWS::Region"
  
  rSSMCloudFrontDistributionId:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "SSM Parameter for Cloudfront Distribution ID"
      Name: !Join [ ".", [ "AMORPHIC", "TRACE", "INFRA", "CLOUDFRONTDISTRIBUTIONID" ] ]
      Type: String
      Value: !Ref rCloudFront
      Tags:
        Name: !Sub "${pSSMProjectName}-${pSSMVerticalName}-${pSSMEnvironment}-AMORPHIC.TRACE.INFRA.CLOUDFRONTDISTRIBUTIONID"
        Environment: !Ref pSSMEnvironment
        Region: !Ref 'AWS::Region'
  
  rSSMGrafanaSecretKMSKey:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "SSM Parameter for Grafana Admin Secret KMS key ID"
      Name: !Join [ ".", [ "AMORPHIC", "TRACE", "INFRA", "GRAFANASECRETKMSKEY" ] ]
      Type: String
      Value: !Ref rGrafanaSecretKMSKey
      Tags:
        Name: !Sub "${pSSMProjectName}-${pSSMVerticalName}-${pSSMEnvironment}-AMORPHIC.TRACE.INFRA.GRAFANASECRETKMSKEY"
        Environment: !Ref pSSMEnvironment
        Region: !Ref "AWS::Region"
